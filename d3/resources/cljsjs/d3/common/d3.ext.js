// d3_externs.js --- 
// 
// Filename: d3_externs.js
// Description: Using D3 in ClojureScript under Google Closure's advanced optimization
// Author: Federico Boniardi
// Maintainer: Federico Boniardi
// Created: Fri Feb 15 21:11:15 2013 (+0100)
// 
// Version: 0.1.1-SNAPSHOT
// Last-Updated: Wed Oct 15 00:34:15 2014 (+0200)
//           By: Federico Boniardi
//     Update #: 4
// URL: https://github.com/federico-b/d3-externs
// 
// Compatibility: lein-cljsbuild "0.2.*", "0.3.0"
// Commentary:
//     based on code autogenerated by http://www.dotnetwise.com/Code/Externs/
//
// The MIT License (MIT)
//
// Copyright (c) 2014 Federico Boniardi
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
// 
// Code:

var d3 = {
    "version": {},
    "map": function () {},
    "functor": function () {},
    "rebind": function () {},
    "ascending": function () {},
    "descending": function () {},
    "mean": function () {},
    "median": function () {},
    "min": function () {},
    "max": function () {},
    "extent": function () {},
    "random": {
        "normal": function () {},
        "logNormal": function () {},
        "irwinHall": function () {}
    },
    "sum": function () {},
    "quantile": function () {},
    "shuffle": function () {},
    "transpose": function () {},
    "zip": function () {},
    "bisector": function () {},
    "bisectLeft": function () {},
    "bisectRight": function () {},
    "bisect": function () {},
    "nest": function () {},
    "keys": function () {},
    "values": function () {},
    "entries": function () {},
    "permute": function () {},
    "merge": function () {},
    "range": function () {},
    "requote": function () {},
    "round": function () {},
    "xhr": function () {},
    "text": function () {},
    "json": function () {},
    "html": function () {},
    "xml": function () {},
    "ns": {
        "prefix": {
            "svg": {},
            "xhtml": {},
            "xlink": {},
            "xml": {},
            "xmlns": {}
        },
        "qualify": function () {}
    },
    "dispatch": function () {},
    "format": function () {},
    "formatPrefix": function () {},
    "ease": function () {},
    "event": {
	"sourceEvent": {
	    "preventDefault": function () {}
	}
    },
    "transform": function () {},
    "interpolate": function () {},
    "interpolateNumber": function () {},
    "interpolateRound": function () {},
    "interpolateString": function () {},
    "interpolateTransform": function () {},
    "interpolateRgb": function () {},
    "interpolateHsl": function () {},
    "interpolateLab": function () {},
    "interpolateHcl": function () {},
    "interpolateArray": function () {},
    "interpolateObject": function () {},
    "interpolators": {
        "0": function () {},
        "1": function () {},
        "2": function () {},
        "3": function () {},
        "4": function () {}
    },
    "rgb": function () {},
    "hsl": function () {},
    "hcl": function () {},
    "lab": function () {},
    "selection": function () {},
    "select": function () {},
    "selectAll": function () {},
    "transition": function () {},
    "timer": function () {},
    "mouse": function () {},
    "touches": function () {},
    "scale": {
        "linear": function () {},
        "log": function () {},
        "pow": function () {},
        "sqrt": function () {},
        "ordinal": function () {},
        "category10": function () {},
        "category20": function () {},
        "category20b": function () {},
        "category20c": function () {},
        "quantile": function () {},
        "quantize": function () {},
        "threshold": function () {},
        "identity": function () {}
    },
    "svg": {
        "arc": function () {},
        "line": function () {},
        "area": function () {},
        "chord": function () {},
        "diagonal": function () {},
        "symbol": function () {},
        "symbolTypes": {
            "0": {},
            "1": {},
            "2": {},
            "3": {},
            "4": {},
            "5": {}
        },
        "axis": function () {},
        "brush": function () {}
    },
    "behavior": {
        "drag": function () {},
        "zoom": function () {}
    },
    "layout": {
        "bundle": function () {},
        "chord": function () {},
        "force": function () {},
        "partition": function () {},
        "pie": function () {},
        "stack": function () {},
        "histogram": function () {},
        "hierarchy": function () {},
        "pack": function () {},
        "cluster": function () {},
        "tree": function () {},
        "treemap": function () {}
    },
    "csv": function () {},
    "tsv": function () {},
    "geo": {
        "stream": function () {},
        "albersUsa": function () {},
        "albers": function () {},
        "azimuthalEqualArea": function () {},
        "azimuthalEquidistant": function () {},
        "bounds": function () {},
        "centroid": function () {},
        "circle": function () {},
        "equirectangular": function () {},
        "gnomonic": function () {},
        "graticule": function () {},
        "interpolate": function () {},
        "greatArc": function () {},
        "mercator": function () {},
        "orthographic": function () {},
        "path": function () {},
        "area": function () {},
        "projection": function () {},
        "projectionMutator": function () {},
        "stereographic": function () {}
    },
    "geom": {
        "hull": function () {},
        "polygon": function () {},
        "voronoi": function () {},
        "delaunay": function () {},
        "quadtree": function () {}
    },
    "time": {
        "format": function () {},
        "second": function () {},
        "seconds": function () {},
        "minute": function () {},
        "minutes": function () {},
        "hour": function () {},
        "hours": function () {},
        "day": function () {},
        "days": function () {},
        "dayOfYear": function () {},
        "sunday": function () {},
        "sundays": function () {},
        "sundayOfYear": function () {},
        "monday": function () {},
        "mondays": function () {},
        "mondayOfYear": function () {},
        "tuesday": function () {},
        "tuesdays": function () {},
        "tuesdayOfYear": function () {},
        "wednesday": function () {},
        "wednesdays": function () {},
        "wednesdayOfYear": function () {},
        "thursday": function () {},
        "thursdays": function () {},
        "thursdayOfYear": function () {},
        "friday": function () {},
        "fridays": function () {},
        "fridayOfYear": function () {},
        "saturday": function () {},
        "saturdays": function () {},
        "saturdayOfYear": function () {},
        "week": function () {},
        "weeks": function () {},
        "weekOfYear": function () {},
        "month": function () {},
        "months": function () {},
        "year": function () {},
        "years": function () {},
        "scale": function () {}
    }
};
d3.map.prototype = function () {};
d3.map.prototype = {
    "has": function () {},
    "get": function () {},
    "set": function () {},
    "remove": function () {},
    "keys": function () {},
    "values": function () {},
    "entries": function () {},
    "forEach": function () {}
};
d3.functor.prototype = function () {};
d3.rebind.prototype = function () {};
d3.ascending.prototype = function () {};
d3.descending.prototype = function () {};
d3.mean.prototype = function () {};
d3.median.prototype = function () {};
d3.min.prototype = function () {};
d3.max.prototype = function () {};
d3.extent.prototype = function () {};
d3.random.normal.prototype = function () {};
d3.random.logNormal.prototype = function () {};
d3.random.irwinHall.prototype = function () {};
d3.sum.prototype = function () {};
d3.quantile.prototype = function () {};
d3.shuffle.prototype = function () {};
d3.transpose.prototype = function () {};
d3.zip.prototype = function () {};
d3.bisector.prototype = function () {};
d3.bisectLeft.prototype = function () {};
d3.bisectRight.prototype = function () {};
d3.bisect.prototype = function () {};
d3.nest.prototype = function () {};
d3.nest.prototype = {
    "key": function () {},
    "sortKeys": function () {},
    "sortValues": function () {},
    "rollup": function () {},
    "map": function () {},
    "entries": function () {}
};
d3.keys.prototype = function () {};
d3.values.prototype = function () {};
d3.entries.prototype = function () {};
d3.permute.prototype = function () {};
d3.merge.prototype = function () {};
d3.range.prototype = function () {};
d3.requote.prototype = function () {};
d3.round.prototype = function () {};
d3.xhr.prototype = function () {};
d3.xhr.prototype = {
    "header": function () {},
    "mimeType": function () {},
    "response": function () {},
    "get": function () {},
    "post": function () {},
    "send": function () {},
    "abort": function () {},
    "on": function () {}
};
d3.text.prototype = function () {};
d3.json.prototype = function () {};
d3.html.prototype = function () {};
d3.xml.prototype = function () {};
d3.dispatch.prototype = function () {};
d3.dispatch.prototype = {
    "on": function () {}
};
d3.format.prototype = function () {};
d3.formatPrefix.prototype = function () {};
d3.ease.prototype = function () {};
d3.interpolate.prototype = function () {};
d3.interpolateNumber.prototype = function () {};
d3.interpolateRound.prototype = function () {};
d3.interpolateString.prototype = function () {};
d3.interpolateTransform.prototype = function () {};
d3.interpolateRgb.prototype = function () {};
d3.interpolateHsl.prototype = function () {};
d3.interpolateLab.prototype = function () {};
d3.interpolateHcl.prototype = function () {};
d3.interpolateArray.prototype = function () {};
d3.interpolateObject.prototype = function () {};
d3.rgb.prototype = function () {};
d3.rgb.prototype = {
    "brighter": function () {},
    "darker": function () {},
    "hsl": function () {},
    "toString": function () {}
};
d3.hsl.prototype = function () {};
d3.hsl.prototype = {
    "brighter": function () {},
    "darker": function () {},
    "rgb": function () {},
    "toString": function () {}
};
d3.hcl.prototype = function () {};
d3.hcl.prototype = {
    "brighter": function () {},
    "darker": function () {},
    "rgb": function () {},
    "toString": function () {}
};
d3.lab.prototype = function () {};
d3.lab.prototype = {
    "brighter": function () {},
    "darker": function () {},
    "rgb": function () {},
    "toString": function () {}
};
d3.selection.prototype = function () {};
d3.select.prototype = function () {};
d3.selectAll.prototype = function () {};
d3.selection.prototype = {
    "enter": function () {},
    "exit": function () {},
    "select": function () {},
    "selectAll": function () {},
    "attr": function () {},
    "classed": function () {},
    "style": function () {},
    "property": function () {},
    "text": function () {},
    "html": function () {},
    "append": function () {},
    "insert": function () {},
    "remove": function () {},
    "data": function () {},
    "datum": function () {},
    "filter": function () {},
    "order": function () {},
    "sort": function () {},
    "on": function () {},
    "each": function () {},
    "call": function () {},
    "empty": function () {},
    "node": function () {},
    "transition": function () {}
};
d3.selection.prototype.select.prototype = function () {};
d3.selection.prototype.selectAll.prototype = function () {};
d3.selection.prototype.attr.prototype = function () {};
d3.selection.prototype.classed.prototype = function () {};
d3.selection.prototype.style.prototype = function () {};
d3.selection.prototype.property.prototype = function () {};
d3.selection.prototype.text.prototype = function () {};
d3.selection.prototype.html.prototype = function () {};
d3.selection.prototype.append.prototype = function () {};
d3.selection.prototype.insert.prototype = function () {};
d3.selection.prototype.remove.prototype = function () {};
d3.selection.prototype.data.prototype = function () {};
d3.selection.prototype.datum.prototype = function () {};
d3.selection.prototype.filter.prototype = function () {};
d3.selection.prototype.order.prototype = function () {};
d3.selection.prototype.sort.prototype = function () {};
d3.selection.prototype.on.prototype = function () {};
d3.selection.prototype.each.prototype = function () {};
d3.selection.prototype.call.prototype = function () {};
d3.selection.prototype.empty.prototype = function () {};
d3.selection.prototype.node.prototype = function () {};
d3.selection.prototype.transition.prototype = function () {};
d3.select.prototype = function () {};
d3.selectAll.prototype = function () {};
d3.transition.prototype = {
    "call": function () {},
    "empty": function () {},
    "node": function () {},
    "select": function () {},
    "selectAll": function () {},
    "filter": function () {},
    "attr": function () {},
    "attrTween": function () {},
    "style": function () {},
    "styleTween": function () {},
    "text": function () {},
    "remove": function () {},
    "ease": function () {},
    "delay": function () {},
    "duration": function () {},
    "each": function () {},
    "transition": function () {},
    "tween": function () {}
};
d3.transition.prototype.call.prototype = function () {};
d3.transition.prototype.empty.prototype = function () {};
d3.transition.prototype.node.prototype = function () {};
d3.transition.prototype.select.prototype = function () {};
d3.transition.prototype.selectAll.prototype = function () {};
d3.transition.prototype.filter.prototype = function () {};
d3.transition.prototype.attr.prototype = function () {};
d3.transition.prototype.attrTween.prototype = function () {};
d3.transition.prototype.style.prototype = function () {};
d3.transition.prototype.styleTween.prototype = function () {};
d3.transition.prototype.text.prototype = function () {};
d3.transition.prototype.remove.prototype = function () {};
d3.transition.prototype.ease.prototype = function () {};
d3.transition.prototype.delay.prototype = function () {};
d3.transition.prototype.duration.prototype = function () {};
d3.transition.prototype.each.prototype = function () {};
d3.transition.prototype.transition.prototype = function () {};
d3.transition.prototype.tween.prototype = function () {};
d3.timer.prototype = function () {};
d3.mouse.prototype = function () {};
d3.touches.prototype = function () {};
d3.scale.linear.prototype = function () {};
d3.scale.linear.prototype = {
    "invert": function () {},
    "domain": function () {},
    "range": function () {},
    "rangeRound": function () {},
    "interpolate": function () {},
    "clamp": function () {},
    "nice": function () {},
    "ticks": function () {},
    "tickFormat": function () {},
    "copy": function () {}
};
d3.scale.log.prototype = function () {};
d3.scale.log.prototype = {
    "invert": function () {},
    "domain": function () {},
    "range": function () {},
    "rangeRound": function () {},
    "interpolate": function () {},
    "clamp": function () {},
    "nice": function () {},
    "ticks": function () {},
    "tickFormat": function () {},
    "copy": function () {}
};
d3.scale.pow.prototype = function () {};
d3.scale.pow.prototype = {
    "invert": function () {},
    "domain": function () {},
    "range": function () {},
    "rangeRound": function () {},
    "interpolate": function () {},
    "clamp": function () {},
    "nice": function () {},
    "ticks": function () {},
    "tickFormat": function () {},
    "exponent": function () {},
    "copy": function () {}
};
d3.scale.sqrt.prototype = function () {};
d3.scale.ordinal.prototype = function () {};
d3.scale.ordinal.prototype = {
    "domain": function () {},
    "range": function () {},
    "rangePoints": function () {},
    "rangeBands": function () {},
    "rangeRoundBands": function () {},
    "rangeBand": function () {},
    "rangeExtent": function () {},
    "copy": function () {}
};
d3.scale.category10.prototype = function () {};
d3.scale.category20.prototype = function () {};
d3.scale.category20b.prototype = function () {};
d3.scale.category20c.prototype = function () {};
d3.scale.quantile.prototype = function () {};
d3.scale.quantile.prototype = {
    "domain": function () {},
    "range": function () {},
    "quantiles": function () {},
    "copy": function () {}
};
d3.scale.quantize.prototype = function () {};
d3.scale.quantize.prototype = {
    "domain": function () {},
    "range": function () {},
    "copy": function () {}
};
d3.scale.threshold.prototype = function () {};
d3.scale.threshold.prototype = {
    "domain": function () {},
    "range": function () {},
    "copy": function () {}
};
d3.scale.identity.prototype = function () {};
d3.scale.identity.prototype = {
    "invert": function () {},
    "domain": function () {},
    "range": function () {},
    "ticks": function () {},
    "tickFormat": function () {},
    "copy": function () {}
};
d3.svg.arc.prototype = function () {};
d3.svg.arc.prototype = {
    "innerRadius": function () {},
    "outerRadius": function () {},
    "startAngle": function () {},
    "endAngle": function () {},
    "centroid": function () {}
};
d3.svg.line.prototype = function () {};
d3.svg.line.prototype = {
    "x": function () {},
    "y": function () {},
    "interpolate": function () {},
    "tension": function () {},
    "defined": function () {},
    "radius": function () {},
    "angle": function () {},
    "radial": function () {}
};
d3.svg.area.prototype = function () {};
d3.svg.area.prototype = {
    "x": function () {},
    "x0": function () {},
    "x1": function () {},
    "y": function () {},
    "y0": function () {},
    "y1": function () {},
    "interpolate": function () {},
    "tension": function () {},
    "defined": function () {},
    "radius": function () {},
    "innerRadius": function () {},
    "outerRadius": function () {},
    "angle": function () {},
    "startAngle": function () {},
    "endAngle": function () {},
    "radial": function () {}
};
d3.svg.chord.prototype = function () {};
d3.svg.chord.prototype = {
    "radius": function () {},
    "startAngle": function () {},
    "endAngle": function () {},
    "source": function () {},
    "target": function () {}
};
d3.svg.diagonal.prototype = function () {};
d3.svg.diagonal.prototype = {
    "source": function () {},
    "target": function () {},
    "projection": function () {}
};
d3.svg.symbol.prototype = function () {};
d3.svg.symbol.prototype = {
    "type": function () {},
    "size": function () {}
};
d3.svg.symbolTypes.prototype = function () {};
d3.svg.axis.prototype = function () {};
d3.svg.axis.prototype = {
    "scale": function () {},
    "orient": function () {},
    "ticks": function () {},
    "tickValues": function () {},
    "tickSubdivide": function () {},
    "tickSize": function () {},
    "tickPadding": function () {},
    "tickFormat": function () {},
    "innerTickSize": function () {},
    "outerTickSize": function () {}
};
d3.svg.brush.prototype = function () {};
d3.svg.brush.prototype = {
    "x": function () {},
    "y": function () {},
    "extent": function () {},
    "clear": function () {},
    "empty": function () {},
    "on": function () {}
};
d3.behavior.drag.prototype = function () {};
d3.behavior.drag.prototype = {
    "origin": function () {},
    "on": function () {}
};
d3.behavior.zoom.prototype = function () {};
d3.behavior.zoom.prototype = {
    "on": function () {},
    "scale": function () {},
    "translate": function () {},
    "scaleExtent": function () {},
    "x": function () {},
    "y": function () {}
};
d3.layout.bundle.prototype = function () {};
d3.layout.chord.prototype = function () {};
d3.layout.chord.prototype = {
    "matrix": function () {},
    "padding": function () {},
    "sortGroups": function () {},
    "sortSubgroups": function () {},
    "sortChords": function () {},
    "chords": function () {},
    "groups": function () {}
};
d3.layout.force.prototype = function () {};
d3.layout.force.prototype = {
    "on": function () {},
    "nodes": function () {},
    "links": function () {},
    "size": function () {},
    "linkDistance": function () {},
    "linkStrength": function () {},
    "friction": function () {},
    "charge": function () {},
    "gravity": function () {},
    "theta": function () {},
    "start": function () {},
    "resume": function () {},
    "stop": function () {},
    "alpha": function () {},
    "tick": function () {},
    "drag": function () {}
};
d3.layout.partition.prototype = function () {};
d3.layout.partition.prototype = {
    "sort": function () {},
    "children": function () {},
    "nodes": function () {},
    "links": function () {},
    "value": function () {},
    "size": function () {}
};
d3.layout.pie.prototype = function () {};
d3.layout.pie.prototype = {
    "sort": function () {},
    "value": function () {},
    "startAngle": function () {},
    "endAngle": function () {}
};
d3.layout.stack.prototype = function () {};
d3.layout.stack.prototype = {
    "values": function () {},
    "order": function () {},
    "offset": function () {},
    "x": function () {},
    "y": function () {},
    "out": function () {}
};
d3.layout.histogram.prototype = function () {};
d3.layout.histogram.prototype = {
    "value": function () {},
    "range": function () {},
    "bins": function () {},
    "frequency": function () {}
};
d3.layout.hierarchy.prototype = function () {};
d3.layout.hierarchy.prototype = {
    "sort": function () {},
    "children": function () {},
    "nodes": function () {},
    "links": function () {},
    "value": function () {},
    "revalue": function () {}
};
d3.layout.pack.prototype = function () {};
d3.layout.pack.prototype = {
    "sort": function () {},
    "children": function () {},
    "nodes": function () {},
    "links": function () {},
    "value": function () {},
    "size": function () {},
    "padding": function () {}
};
d3.layout.cluster.prototype = function () {};
d3.layout.cluster.prototype = {
    "sort": function () {},
    "children": function () {},
    "nodes": function () {},
    "links": function () {},
    "separation": function () {},
    "size": function () {}
};
d3.layout.tree.prototype = function () {};
d3.layout.tree.prototype = {
    "sort": function () {},
    "children": function () {},
    "nodes": function () {},
    "links": function () {},
    "separation": function () {},
    "size": function () {}
};
d3.layout.treemap.prototype = function () {};
d3.layout.treemap.prototype = {
    "sort": function () {},
    "children": function () {},
    "nodes": function () {},
    "links": function () {},
    "value": function () {},
    "size": function () {},
    "padding": function () {},
    "round": function () {},
    "sticky": function () {},
    "mode": function () {}
};
d3.csv.prototype = function () {};
d3.tsv.prototype = function () {};
d3.geo.stream.prototype = function () {};
d3.geo.stream.prototype = {
    "point": function () {},
    "lineStart": function () {},
    "lineEnd": function () {},
    "polygonStart": function () {},
    "polygonEnd": function () {},
    "sphere": function () {}
};
d3.geo.albersUsa.prototype = function () {};
d3.geo.albers.prototype = function () {};
d3.geo.albers.prototype = {
  "parallels": function () {},
  "raw": function () {}
};
d3.geo.albers.raw.prototype = function () {};
d3.geo.azimuthalEqualArea.prototype = function () {};
d3.geo.azimuthalEqualArea.raw.prototype = function () {};
d3.geo.azimuthalEquidistant.prototype = function () {};
d3.geo.azimuthalEquidistant.raw.prototype = function () {};
d3.geo.bounds.prototype = function () {};
d3.geo.centroid.prototype = function () {};
d3.geo.circle.prototype = function () {};
d3.geo.circle.prototype = {
    "origin": function () {},
    "angle": function () {},
    "precision": function () {},
    "raw": function () {}
};
d3.geo.equirectangular.prototype = function () {};
d3.geo.equirectangular.raw.prototype = function () {};
d3.geo.gnomonic.prototype = function () {};
d3.geo.gnomonic.raw.prototype = function () {};
d3.geo.graticule.prototype = function () {};
d3.geo.interpolate.prototype = function () {};
d3.geo.greatArc.prototype = function () {};
d3.geo.greatArc.prototype = {
    "distance": function () {},
    "source": function () {},
    "target": function () {},
    "precision": function () {},
    "raw": function () {}
};
d3.geo.mercator.prototype = function () {};
d3.geo.mercator.raw.prototype = function () {};
d3.geo.orthographic.prototype = function () {};
d3.geo.orthographic.raw.prototype = function () {};
d3.geo.path.prototype = function () {};
d3.geo.path.prototype = {
    "projection": function () {},
    "context": function () {},
    "pointRadius": function () {},
    "area": function () {},
    "centroid": function () {},
    "bounds": function () {}
};
d3.geo.area.prototype = function () {};
d3.geo.projection.prototype = function () {};
d3.geo.projection.prototype = {
    "invert": function () {},
    "rotate": function () {},
    "center": function () {},
    "translate": function () {},
    "scale": function () {},
    "clipAngle": function () {},
    "precision": function () {},
    "stream": function () {}
};
d3.geo.projectionMutator.prototype = function () {};
d3.geo.stereographic.prototype = function () {};
d3.geo.stereographic.raw.prototype = function () {};
d3.geom.hull.prototype = function () {};
d3.geom.polygon.prototype = function () {};
d3.geom.polygon.prototype = {
    "area": function () {},
    "centroid": function () {},
    "clip": function () {}
};
d3.geom.voronoi.prototype = function () {}; 
d3.geom.delaunay.prototype = function () {};
d3.geom.quadtree.prototype = function () {};
d3.geom.quadtree.prototype = {
    "add": function () {},
    "visit": function () {}
};
d3.time.format.prototype = function () {};
d3.time.second.prototype = function () {};
d3.time.seconds.prototype = function () {};
d3.time.minute.prototype = function () {};
d3.time.minutes.prototype = function () {};
d3.time.hour.prototype = function () {};
d3.time.hours.prototype = function () {};
d3.time.day.prototype = function () {};
d3.time.days.prototype = function () {};
d3.time.dayOfYear.prototype = function () {};
d3.time.sunday.prototype = function () {};
d3.time.sundays.prototype = function () {};
d3.time.sundayOfYear.prototype = function () {};
d3.time.monday.prototype = function () {};
d3.time.mondays.prototype = function () {};
d3.time.mondayOfYear.prototype = function () {};
d3.time.tuesday.prototype = function () {};
d3.time.tuesdays.prototype = function () {};
d3.time.tuesdayOfYear.prototype = function () {};
d3.time.wednesday.prototype = function () {};
d3.time.wednesdays.prototype = function () {};
d3.time.wednesdayOfYear.prototype = function () {};
d3.time.thursday.prototype = function () {};
d3.time.thursdays.prototype = function () {};
d3.time.thursdayOfYear.prototype = function () {};
d3.time.friday.prototype = function () {};
d3.time.fridays.prototype = function () {};
d3.time.fridayOfYear.prototype = function () {};
d3.time.saturday.prototype = function () {};
d3.time.saturdays.prototype = function () {};
d3.time.saturdayOfYear.prototype = function () {};
d3.time.week.prototype = function () {};
d3.time.weeks.prototype = function () {};
d3.time.weekOfYear.prototype = function () {};
d3.time.month.prototype = function () {};
d3.time.months.prototype = function () {};
d3.time.year.prototype = function () {};
d3.time.years.prototype = function () {};
d3.time.scale.prototype = function () {};

// 
// d3_externs.js ends here
