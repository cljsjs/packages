/**********************************************************************
 * Extern for vegaEmbed
 * Generated by http://jmmk.github.io/javascript-externs-generator
 **********************************************************************/
var vegaEmbed = {
  "container": function () {},
  "default": function () {},
  "embed": function () {},
  "vega": {
    "Bounds": function () {},
    "CanvasHandler": function () {},
    "CanvasRenderer": function () {},
    "Dataflow": function () {},
    "Debug": {},
    "Error": {},
    "EventStream": function () {},
    "Gradient": function () {},
    "GroupItem": function () {},
    "Handler": function () {},
    "Info": {},
    "Item": function () {},
    "Marks": {
      "arc": {
        "attr": function () {},
        "bound": function () {},
        "draw": function () {},
        "nested": {},
        "pick": function () {},
        "tag": {},
        "type": {}
      },
      "area": {
        "attr": function () {},
        "bound": function () {},
        "draw": function () {},
        "nested": {},
        "pick": function () {},
        "tag": {},
        "type": {}
      },
      "group": {
        "attr": function () {},
        "background": function () {},
        "bound": function () {},
        "draw": function () {},
        "foreground": function () {},
        "nested": {},
        "pick": function () {},
        "tag": {},
        "type": {}
      },
      "image": {
        "attr": function () {},
        "bound": function () {},
        "draw": function () {},
        "get": function () {},
        "nested": {},
        "pick": function () {},
        "tag": {},
        "type": {},
        "xOffset": function () {},
        "yOffset": function () {}
      },
      "line": {
        "attr": function () {},
        "bound": function () {},
        "draw": function () {},
        "nested": {},
        "pick": function () {},
        "tag": {},
        "type": {}
      },
      "path": {
        "attr": function () {},
        "bound": function () {},
        "draw": function () {},
        "nested": {},
        "pick": function () {},
        "tag": {},
        "type": {}
      },
      "rect": {
        "attr": function () {},
        "bound": function () {},
        "draw": function () {},
        "nested": {},
        "pick": function () {},
        "tag": {},
        "type": {}
      },
      "rule": {
        "attr": function () {},
        "bound": function () {},
        "draw": function () {},
        "nested": {},
        "pick": function () {},
        "tag": {},
        "type": {}
      },
      "shape": {
        "attr": function () {},
        "bound": function () {},
        "draw": function () {},
        "nested": {},
        "pick": function () {},
        "tag": {},
        "type": {}
      },
      "symbol": {
        "attr": function () {},
        "bound": function () {},
        "draw": function () {},
        "nested": {},
        "pick": function () {},
        "tag": {},
        "type": {}
      },
      "text": {
        "attr": function () {},
        "bound": function () {},
        "draw": function () {},
        "nested": {},
        "pick": function () {},
        "tag": {},
        "type": {}
      },
      "trail": {
        "attr": function () {},
        "bound": function () {},
        "draw": function () {},
        "nested": {},
        "pick": function () {},
        "tag": {},
        "type": {}
      }
    },
    "MultiPulse": function () {},
    "None": {},
    "Operator": function () {},
    "Parameters": function () {},
    "Pulse": function () {},
    "RenderType": {
      "Canvas": {},
      "None": {},
      "PNG": {},
      "SVG": {}
    },
    "Renderer": function () {},
    "ResourceLoader": function () {},
    "SVGHandler": function () {},
    "SVGRenderer": function () {},
    "SVGStringRenderer": function () {},
    "Scenegraph": function () {},
    "Transform": function () {},
    "View": function () {},
    "Warn": {},
    "accessor": function () {},
    "accessorFields": function () {},
    "accessorName": function () {},
    "array": function () {},
    "bin": function () {},
    "bootstrapCI": function () {},
    "boundClip": function () {},
    "boundContext": {
      "arc": function () {},
      "beginPath": function () {},
      "bezierCurveTo": function () {},
      "closePath": function () {},
      "lineTo": function () {},
      "moveTo": function () {},
      "quadraticCurveTo": function () {},
      "rect": function () {}
    },
    "boundItem": function () {},
    "boundMark": function () {},
    "boundStroke": function () {},
    "changeset": function () {},
    "closeTag": function () {},
    "compare": function () {},
    "constant": function () {},
    "debounce": function () {},
    "definition": function () {},
    "domChild": function () {},
    "domClear": function () {},
    "domCreate": function () {},
    "domFind": function () {},
    "error": function () {},
    "expressionFunction": function () {},
    "extend": function () {},
    "extentIndex": function () {},
    "falsy": {
      "fields": {},
      "fname": {}
    },
    "fastmap": function () {},
    "field": function () {},
    "font": function () {},
    "formatLocale": function () {},
    "formats": function () {},
    "id": {
      "fields": {},
      "fname": {}
    },
    "identity": {
      "fields": {},
      "fname": {}
    },
    "inferType": function () {},
    "inferTypes": function () {},
    "ingest": function () {},
    "inherits": function () {},
    "interpolate": function () {},
    "interpolateRange": function () {},
    "isArray": function () {},
    "isBoolean": function () {},
    "isDate": function () {},
    "isFunction": function () {},
    "isNumber": function () {},
    "isObject": function () {},
    "isRegExp": function () {},
    "isString": function () {},
    "isTuple": function () {},
    "key": function () {},
    "loader": function () {},
    "logger": function () {},
    "merge": function () {},
    "one": {
      "fields": {},
      "fname": {}
    },
    "openTag": function () {},
    "pad": function () {},
    "panLinear": function () {},
    "panLog": function () {},
    "panPow": function () {},
    "parse": function () {},
    "pathCurves": function () {},
    "pathEqual": function () {},
    "pathParse": function () {},
    "pathRectangle": function () {},
    "pathRender": function () {},
    "pathSymbols": function () {},
    "pathTrail": function () {},
    "peek": function () {},
    "point": function () {},
    "projection": function () {},
    "quartiles": function () {},
    "random": function () {},
    "randomInteger": function () {},
    "randomKDE": function () {},
    "randomMixture": function () {},
    "randomNormal": function () {},
    "randomUniform": function () {},
    "read": function () {},
    "renderModule": function () {},
    "repeat": function () {},
    "resetSVGClipId": function () {},
    "runtime": function () {},
    "runtimeContext": function () {},
    "scale": function () {},
    "sceneEqual": function () {},
    "sceneFromJSON": function () {},
    "scenePickVisit": function () {},
    "sceneToJSON": function () {},
    "sceneVisit": function () {},
    "sceneZOrder": function () {},
    "scheme": function () {},
    "setRandom": function () {},
    "splitAccessPath": function () {},
    "stringValue": function () {},
    "textMetrics": {
      "canvas": function () {},
      "estimateWidth": function () {},
      "height": function () {},
      "measureWidth": function () {},
      "width": function () {}
    },
    "timeFormatLocale": function () {},
    "timeInterval": function () {},
    "toBoolean": function () {},
    "toDate": function () {},
    "toNumber": function () {},
    "toSet": function () {},
    "toString": function () {},
    "transform": function () {},
    "transforms": {
      "aggregate": {
        "Definition": {
          "metadata": {
            "changes": {},
            "generates": {}
          },
          "params": {},
          "type": {}
        }
      },
      "axisticks": function () {},
      "bin": {
        "Definition": {
          "metadata": {
            "modifies": {}
          },
          "params": {},
          "type": {}
        }
      },
      "bound": function () {},
      "collect": {
        "Definition": {
          "metadata": {
            "source": {}
          },
          "params": {},
          "type": {}
        }
      },
      "compare": function () {},
      "contour": {
        "Definition": {
          "metadata": {
            "generates": {}
          },
          "params": {},
          "type": {}
        }
      },
      "countpattern": {
        "Definition": {
          "metadata": {
            "changes": {},
            "generates": {}
          },
          "params": {},
          "type": {}
        }
      },
      "cross": {
        "Definition": {
          "metadata": {
            "generates": {}
          },
          "params": {},
          "type": {}
        }
      },
      "crossfilter": {
        "Definition": {
          "metadata": {},
          "params": {},
          "type": {}
        }
      },
      "datajoin": function () {},
      "density": {
        "Definition": {
          "metadata": {
            "generates": {}
          },
          "params": {},
          "type": {}
        }
      },
      "encode": function () {},
      "extent": {
        "Definition": {
          "metadata": {},
          "params": {},
          "type": {}
        }
      },
      "facet": function () {},
      "field": function () {},
      "filter": {
        "Definition": {
          "metadata": {
            "changes": {}
          },
          "params": {},
          "type": {}
        }
      },
      "flatten": {
        "Definition": {
          "metadata": {
            "generates": {}
          },
          "params": {},
          "type": {}
        }
      },
      "fold": {
        "Definition": {
          "metadata": {
            "generates": {}
          },
          "params": {},
          "type": {}
        }
      },
      "force": {
        "Definition": {
          "metadata": {
            "modifies": {}
          },
          "params": {},
          "type": {}
        }
      },
      "formula": {
        "Definition": {
          "metadata": {
            "modifies": {}
          },
          "params": {},
          "type": {}
        }
      },
      "generate": function () {},
      "geojson": {
        "Definition": {
          "metadata": {},
          "params": {},
          "type": {}
        }
      },
      "geopath": {
        "Definition": {
          "metadata": {
            "modifies": {}
          },
          "params": {},
          "type": {}
        }
      },
      "geopoint": {
        "Definition": {
          "metadata": {
            "modifies": {}
          },
          "params": {},
          "type": {}
        }
      },
      "geoshape": {
        "Definition": {
          "metadata": {
            "modifies": {}
          },
          "params": {},
          "type": {}
        }
      },
      "graticule": {
        "Definition": {
          "metadata": {
            "changes": {}
          },
          "params": {},
          "type": {}
        }
      },
      "identifier": {
        "Definition": {
          "metadata": {
            "modifies": {}
          },
          "params": {},
          "type": {}
        }
      },
      "impute": {
        "Definition": {
          "metadata": {
            "changes": {}
          },
          "params": {},
          "type": {}
        }
      },
      "joinaggregate": {
        "Definition": {
          "metadata": {
            "modifies": {}
          },
          "params": {},
          "type": {}
        }
      },
      "key": function () {},
      "legendentries": function () {},
      "linkpath": {
        "Definition": {
          "metadata": {
            "modifies": {}
          },
          "params": {},
          "type": {}
        }
      },
      "lookup": {
        "Definition": {
          "metadata": {
            "modifies": {}
          },
          "params": {},
          "type": {}
        }
      },
      "mark": function () {},
      "multiextent": function () {},
      "multivalues": function () {},
      "nest": {
        "Definition": {
          "metadata": {
            "changes": {},
            "treesource": {}
          },
          "params": {},
          "type": {}
        }
      },
      "overlap": function () {},
      "pack": {
        "Definition": {
          "metadata": {
            "modifies": {},
            "tree": {}
          },
          "params": {},
          "type": {}
        }
      },
      "params": function () {},
      "partition": {
        "Definition": {
          "metadata": {
            "modifies": {},
            "tree": {}
          },
          "params": {},
          "type": {}
        }
      },
      "pie": {
        "Definition": {
          "metadata": {
            "modifies": {}
          },
          "params": {},
          "type": {}
        }
      },
      "pivot": {
        "Definition": {
          "metadata": {
            "changes": {},
            "generates": {}
          },
          "params": {},
          "type": {}
        }
      },
      "prefacet": function () {},
      "project": {
        "Definition": {
          "metadata": {
            "changes": {},
            "generates": {}
          },
          "params": {},
          "type": {}
        }
      },
      "projection": function () {},
      "proxy": function () {},
      "relay": function () {},
      "render": function () {},
      "resolvefilter": {
        "Definition": {
          "metadata": {},
          "params": {},
          "type": {}
        }
      },
      "sample": {
        "Definition": {
          "metadata": {},
          "params": {},
          "type": {}
        }
      },
      "scale": function () {},
      "sequence": {
        "Definition": {
          "metadata": {
            "changes": {}
          },
          "output": {},
          "params": {},
          "type": {}
        }
      },
      "sieve": function () {},
      "sortitems": function () {},
      "stack": {
        "Definition": {
          "metadata": {
            "modifies": {}
          },
          "params": {},
          "type": {}
        }
      },
      "stratify": {
        "Definition": {
          "metadata": {
            "treesource": {}
          },
          "params": {},
          "type": {}
        }
      },
      "subflow": function () {},
      "tree": {
        "Definition": {
          "metadata": {
            "modifies": {},
            "tree": {}
          },
          "params": {},
          "type": {}
        }
      },
      "treelinks": {
        "Definition": {
          "metadata": {
            "changes": {},
            "generates": {},
            "tree": {}
          },
          "params": {},
          "type": {}
        }
      },
      "treemap": {
        "Definition": {
          "metadata": {
            "modifies": {},
            "tree": {}
          },
          "params": {},
          "type": {}
        }
      },
      "tupleindex": function () {},
      "validTicks": function () {},
      "values": function () {},
      "viewlayout": function () {},
      "voronoi": {
        "Definition": {
          "metadata": {
            "modifies": {}
          },
          "params": {},
          "type": {}
        }
      },
      "window": {
        "Definition": {
          "metadata": {
            "modifies": {}
          },
          "params": {},
          "type": {}
        }
      },
      "wordcloud": {
        "Definition": {
          "metadata": {
            "modifies": {}
          },
          "params": {},
          "type": {}
        }
      }
    },
    "truncate": function () {},
    "truthy": {
      "fields": {},
      "fname": {}
    },
    "tupleid": function () {},
    "typeParsers": {
      "boolean": function () {},
      "date": function () {},
      "integer": function () {},
      "number": function () {},
      "string": function () {},
      "unknown": {
        "fields": {},
        "fname": {}
      }
    },
    "utcInterval": function () {},
    "version": {},
    "visitArray": function () {},
    "zero": {
      "fields": {},
      "fname": {}
    },
    "zoomLinear": function () {},
    "zoomLog": function () {},
    "zoomPow": function () {}
  },
  "vl": {
    "aggregate": {
      "AGGREGATE_OPS": {},
      "COUNTING_OPS": {},
      "SHARED_DOMAIN_OPS": {},
      "SHARED_DOMAIN_OP_INDEX": {
        "average": {},
        "max": {},
        "mean": {},
        "median": {},
        "min": {},
        "q1": {},
        "q3": {}
      },
      "SUM_OPS": {},
      "isAggregateOp": function () {},
      "isCountingAggregateOp": function () {}
    },
    "axis": {
      "AXIS_PARTS": {},
      "AXIS_PROPERTIES": {},
      "AXIS_PROPERTY_TYPE": {
        "domain": {},
        "grid": {},
        "gridScale": {},
        "labelFlush": {},
        "labelOverlap": {},
        "labels": {},
        "maxExtent": {},
        "minExtent": {},
        "offset": {},
        "scale": {},
        "ticks": {},
        "title": {},
        "values": {},
        "zindex": {}
      },
      "VG_AXIS_PROPERTIES": {},
      "isAxisProperty": function () {}
    },
    "bin": {
      "autoMaxBins": function () {},
      "binToString": function () {},
      "isBinParams": function () {}
    },
    "channel": {
      "CHANNELS": {},
      "COLOR": {},
      "COLUMN": {},
      "Channel": {
        "COLOR": {},
        "COLUMN": {},
        "DETAIL": {},
        "FILL": {},
        "HREF": {},
        "KEY": {},
        "LATITUDE": {},
        "LATITUDE2": {},
        "LONGITUDE": {},
        "LONGITUDE2": {},
        "OPACITY": {},
        "ORDER": {},
        "ROW": {},
        "SHAPE": {},
        "SIZE": {},
        "STROKE": {},
        "TEXT": {},
        "TOOLTIP": {},
        "X": {},
        "X2": {},
        "Y": {},
        "Y2": {}
      },
      "DETAIL": {},
      "FILL": {},
      "GEOPOSITION_CHANNELS": {},
      "GEOPOSITION_CHANNEL_INDEX": {
        "latitude": {},
        "latitude2": {},
        "longitude": {},
        "longitude2": {}
      },
      "HREF": {},
      "KEY": {},
      "LATITUDE": {},
      "LATITUDE2": {},
      "LONGITUDE": {},
      "LONGITUDE2": {},
      "NONPOSITION_CHANNELS": {},
      "NONPOSITION_SCALE_CHANNELS": {},
      "OPACITY": {},
      "ORDER": {},
      "POSITION_SCALE_CHANNELS": {},
      "ROW": {},
      "SCALE_CHANNELS": {},
      "SHAPE": {},
      "SINGLE_DEF_CHANNELS": {},
      "SIZE": {},
      "STROKE": {},
      "TEXT": {},
      "TOOLTIP": {},
      "UNIT_CHANNELS": {},
      "X": {},
      "X2": {},
      "Y": {},
      "Y2": {},
      "getSupportedMark": function () {},
      "isChannel": function () {},
      "isColorChannel": function () {},
      "isScaleChannel": function () {},
      "rangeType": function () {},
      "supportMark": function () {}
    },
    "compile": function () {},
    "compositeMark": {
      "COMPOSITE_MARK_STYLES": {},
      "VL_ONLY_COMPOSITE_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX": {
        "box": {},
        "boxMid": {},
        "boxWhisker": {}
      },
      "add": function () {},
      "normalize": function () {},
      "remove": function () {}
    },
    "config": {
      "defaultConfig": {
        "area": {},
        "axis": {},
        "axisBand": {},
        "axisBottom": {},
        "axisLeft": {},
        "axisRight": {},
        "axisTop": {},
        "axisX": {},
        "axisY": {
          "minExtent": {}
        },
        "bar": {
          "binSpacing": {},
          "continuousBandSize": {}
        },
        "box": {
          "extent": {},
          "size": {}
        },
        "boxMid": {
          "color": {}
        },
        "boxWhisker": {},
        "circle": {},
        "countTitle": {},
        "geoshape": {},
        "invalidValues": {},
        "legend": {},
        "line": {},
        "mark": {
          "color": {}
        },
        "padding": {},
        "point": {},
        "projection": {},
        "rect": {},
        "rule": {
          "color": {}
        },
        "scale": {
          "bandPaddingInner": {},
          "facetSpacing": {},
          "maxFontSize": {},
          "maxOpacity": {},
          "maxStrokeWidth": {},
          "minBandSize": {},
          "minFontSize": {},
          "minOpacity": {},
          "minSize": {},
          "minStrokeWidth": {},
          "pointPadding": {},
          "rangeStep": {},
          "textXRangeStep": {}
        },
        "selection": {
          "interval": {
            "encodings": {},
            "mark": {
              "fill": {},
              "fillOpacity": {},
              "stroke": {}
            },
            "on": {},
            "resolve": {},
            "translate": {},
            "zoom": {}
          },
          "multi": {
            "empty": {},
            "fields": {},
            "on": {},
            "resolve": {},
            "toggle": {}
          },
          "single": {
            "empty": {},
            "fields": {},
            "on": {},
            "resolve": {}
          }
        },
        "square": {},
        "style": {},
        "text": {
          "color": {}
        },
        "tick": {
          "thickness": {}
        },
        "timeFormat": {},
        "title": {},
        "trail": {},
        "view": {
          "height": {},
          "width": {}
        }
      },
      "defaultViewConfig": {
        "height": {},
        "width": {}
      },
      "initConfig": function () {},
      "stripAndRedirectConfig": function () {}
    },
    "data": {
      "MAIN": {},
      "RAW": {},
      "isInlineData": function () {},
      "isNamedData": function () {},
      "isUrlData": function () {}
    },
    "datetime": {
      "DAYS": {},
      "MONTHS": {},
      "SHORT_DAYS": {},
      "SHORT_MONTHS": {},
      "dateTimeExpr": function () {},
      "isDateTime": function () {}
    },
    "encoding": {
      "channelHasField": function () {},
      "fieldDefs": function () {},
      "forEach": function () {},
      "isAggregate": function () {},
      "isRanged": function () {},
      "normalizeEncoding": function () {},
      "reduce": function () {}
    },
    "facet": {},
    "fieldDef": {
      "channelCompatibility": function () {},
      "defaultTitleFormatter": function () {},
      "defaultType": function () {},
      "functionalTitleFormatter": function () {},
      "getFieldDef": function () {},
      "hasConditionalFieldDef": function () {},
      "hasConditionalValueDef": function () {},
      "isConditionalDef": function () {},
      "isConditionalSelection": function () {},
      "isContinuous": function () {},
      "isCount": function () {},
      "isDiscrete": function () {},
      "isFieldDef": function () {},
      "isNumberFieldDef": function () {},
      "isRepeatRef": function () {},
      "isScaleFieldDef": function () {},
      "isStringFieldDef": function () {},
      "isTimeFieldDef": function () {},
      "isValueDef": function () {},
      "normalize": function () {},
      "normalizeBin": function () {},
      "normalizeFieldDef": function () {},
      "resetTitleFormatter": function () {},
      "setTitleFormatter": function () {},
      "title": function () {},
      "toFieldDefBase": function () {},
      "valueArray": function () {},
      "valueExpr": function () {},
      "verbalTitleFormatter": function () {},
      "vgField": function () {}
    },
    "header": {
      "HEADER_LABEL_PROPERTIES": {},
      "HEADER_LABEL_PROPERTIES_MAP": {
        "labelAngle": {},
        "labelColor": {},
        "labelFont": {},
        "labelFontSize": {},
        "labelLimit": {}
      },
      "HEADER_TITLE_PROPERTIES": {},
      "HEADER_TITLE_PROPERTIES_MAP": {
        "titleAnchor": {},
        "titleAngle": {},
        "titleBaseline": {},
        "titleColor": {},
        "titleFont": {},
        "titleFontSize": {},
        "titleFontWeight": {},
        "titleLimit": {}
      }
    },
    "legend": {
      "LEGEND_PROPERTIES": {},
      "VG_LEGEND_PROPERTIES": {},
      "defaultLegendConfig": {}
    },
    "mark": {
      "AREA": {},
      "BAR": {},
      "CIRCLE": {},
      "FILL_CONFIG": {},
      "FILL_STROKE_CONFIG": {},
      "GEOSHAPE": {},
      "LINE": {},
      "Mark": {
        "AREA": {},
        "BAR": {},
        "CIRCLE": {},
        "GEOSHAPE": {},
        "LINE": {},
        "POINT": {},
        "RECT": {},
        "RULE": {},
        "SQUARE": {},
        "TEXT": {},
        "TICK": {},
        "TRAIL": {}
      },
      "POINT": {},
      "PRIMITIVE_MARKS": {},
      "RECT": {},
      "RULE": {},
      "SQUARE": {},
      "STROKE_CONFIG": {},
      "TEXT": {},
      "TICK": {},
      "TRAIL": {},
      "VL_ONLY_MARK_CONFIG_PROPERTIES": {},
      "VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX": {
        "area": {},
        "bar": {},
        "line": {},
        "text": {},
        "tick": {}
      },
      "defaultBarConfig": {
        "binSpacing": {},
        "continuousBandSize": {}
      },
      "defaultMarkConfig": {
        "color": {}
      },
      "defaultTickConfig": {
        "thickness": {}
      },
      "isMark": function () {},
      "isMarkDef": function () {},
      "isPathMark": function () {},
      "isPrimitiveMark": function () {}
    },
    "scale": {
      "CONTINUOUS_DOMAIN_SCALES": {},
      "CONTINUOUS_TO_CONTINUOUS_SCALES": {},
      "DISCRETE_DOMAIN_SCALES": {},
      "NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES": {},
      "SCALE_PROPERTIES": {},
      "SCALE_TYPES": {},
      "SCALE_TYPE_INDEX": {
        "color_geojson": {},
        "color_geojson_bin": {},
        "color_latitude": {},
        "color_latitude_bin": {},
        "color_longitude": {},
        "color_longitude_bin": {},
        "color_nominal": {},
        "color_nominal_bin": {},
        "color_ordinal": {},
        "color_ordinal_bin": {},
        "color_quantitative": {},
        "color_quantitative_bin": {},
        "color_temporal": {},
        "color_temporal_bin": {},
        "fill_geojson": {},
        "fill_geojson_bin": {},
        "fill_latitude": {},
        "fill_latitude_bin": {},
        "fill_longitude": {},
        "fill_longitude_bin": {},
        "fill_nominal": {},
        "fill_nominal_bin": {},
        "fill_ordinal": {},
        "fill_ordinal_bin": {},
        "fill_quantitative": {},
        "fill_quantitative_bin": {},
        "fill_temporal": {},
        "fill_temporal_bin": {},
        "opacity_geojson": {},
        "opacity_geojson_bin": {},
        "opacity_latitude": {},
        "opacity_latitude_bin": {},
        "opacity_longitude": {},
        "opacity_longitude_bin": {},
        "opacity_nominal": {},
        "opacity_nominal_bin": {},
        "opacity_ordinal": {},
        "opacity_ordinal_bin": {},
        "opacity_quantitative": {},
        "opacity_quantitative_bin": {},
        "opacity_temporal": {},
        "opacity_temporal_bin": {},
        "shape_geojson": {},
        "shape_geojson_bin": {},
        "shape_latitude": {},
        "shape_latitude_bin": {},
        "shape_longitude": {},
        "shape_longitude_bin": {},
        "shape_nominal": {},
        "shape_nominal_bin": {},
        "shape_ordinal": {},
        "shape_ordinal_bin": {},
        "size_geojson": {},
        "size_geojson_bin": {},
        "size_latitude": {},
        "size_latitude_bin": {},
        "size_longitude": {},
        "size_longitude_bin": {},
        "size_nominal": {},
        "size_nominal_bin": {},
        "size_ordinal": {},
        "size_ordinal_bin": {},
        "size_quantitative": {},
        "size_quantitative_bin": {},
        "size_temporal": {},
        "size_temporal_bin": {},
        "stroke_geojson": {},
        "stroke_geojson_bin": {},
        "stroke_latitude": {},
        "stroke_latitude_bin": {},
        "stroke_longitude": {},
        "stroke_longitude_bin": {},
        "stroke_nominal": {},
        "stroke_nominal_bin": {},
        "stroke_ordinal": {},
        "stroke_ordinal_bin": {},
        "stroke_quantitative": {},
        "stroke_quantitative_bin": {},
        "stroke_temporal": {},
        "stroke_temporal_bin": {},
        "x_geojson": {},
        "x_geojson_bin": {},
        "x_latitude": {},
        "x_latitude_bin": {},
        "x_longitude": {},
        "x_longitude_bin": {},
        "x_nominal": {},
        "x_nominal_bin": {},
        "x_ordinal": {},
        "x_ordinal_bin": {},
        "x_quantitative": {},
        "x_quantitative_bin": {},
        "x_temporal": {},
        "x_temporal_bin": {},
        "y_geojson": {},
        "y_geojson_bin": {},
        "y_latitude": {},
        "y_latitude_bin": {},
        "y_longitude": {},
        "y_longitude_bin": {},
        "y_nominal": {},
        "y_nominal_bin": {},
        "y_ordinal": {},
        "y_ordinal_bin": {},
        "y_quantitative": {},
        "y_quantitative_bin": {},
        "y_temporal": {},
        "y_temporal_bin": {}
      },
      "ScaleType": {
        "BAND": {},
        "BIN_LINEAR": {},
        "BIN_ORDINAL": {},
        "LINEAR": {},
        "LOG": {},
        "ORDINAL": {},
        "POINT": {},
        "POW": {},
        "QUANTILE": {},
        "QUANTIZE": {},
        "SEQUENTIAL": {},
        "SQRT": {},
        "THRESHOLD": {},
        "TIME": {},
        "UTC": {}
      },
      "TIME_SCALE_TYPES": {},
      "channelScalePropertyIncompatability": function () {},
      "channelSupportScaleType": function () {},
      "defaultScaleConfig": {
        "bandPaddingInner": {},
        "facetSpacing": {},
        "maxFontSize": {},
        "maxOpacity": {},
        "maxStrokeWidth": {},
        "minBandSize": {},
        "minFontSize": {},
        "minOpacity": {},
        "minSize": {},
        "minStrokeWidth": {},
        "pointPadding": {},
        "rangeStep": {},
        "textXRangeStep": {}
      },
      "getSupportedScaleType": function () {},
      "hasContinuousDomain": function () {},
      "hasDiscreteDomain": function () {},
      "isBinScale": function () {},
      "isContinuousToContinuous": function () {},
      "isExtendedScheme": function () {},
      "isSelectionDomain": function () {},
      "scaleCompatible": function () {},
      "scaleTypePrecedence": function () {},
      "scaleTypeSupportDataType": function () {},
      "scaleTypeSupportProperty": function () {}
    },
    "sort": {
      "isSortArray": function () {},
      "isSortField": function () {}
    },
    "spec": {
      "fieldDefs": function () {},
      "isConcatSpec": function () {},
      "isFacetSpec": function () {},
      "isHConcatSpec": function () {},
      "isLayerSpec": function () {},
      "isRepeatSpec": function () {},
      "isStacked": function () {},
      "isUnitSpec": function () {},
      "isVConcatSpec": function () {},
      "normalize": function () {}
    },
    "stack": {
      "STACKABLE_MARKS": {},
      "STACK_BY_DEFAULT_MARKS": {},
      "isStackOffset": function () {},
      "stack": function () {}
    },
    "timeUnit": {
      "TIMEUNITS": {},
      "TIMEUNIT_PARTS": {},
      "TimeUnit": {
        "DATE": {},
        "DAY": {},
        "HOURS": {},
        "HOURSMINUTES": {},
        "HOURSMINUTESSECONDS": {},
        "MILLISECONDS": {},
        "MINUTES": {},
        "MINUTESSECONDS": {},
        "MONTH": {},
        "MONTHDATE": {},
        "QUARTER": {},
        "QUARTERMONTH": {},
        "SECONDS": {},
        "SECONDSMILLISECONDS": {},
        "UTCDATE": {},
        "UTCDAY": {},
        "UTCHOURS": {},
        "UTCHOURSMINUTES": {},
        "UTCHOURSMINUTESSECONDS": {},
        "UTCMILLISECONDS": {},
        "UTCMINUTES": {},
        "UTCMINUTESSECONDS": {},
        "UTCMONTH": {},
        "UTCMONTHDATE": {},
        "UTCQUARTER": {},
        "UTCQUARTERMONTH": {},
        "UTCSECONDS": {},
        "UTCSECONDSMILLISECONDS": {},
        "UTCYEAR": {},
        "UTCYEARMONTH": {},
        "UTCYEARMONTHDATE": {},
        "UTCYEARMONTHDATEHOURS": {},
        "UTCYEARMONTHDATEHOURSMINUTES": {},
        "UTCYEARMONTHDATEHOURSMINUTESSECONDS": {},
        "UTCYEARQUARTER": {},
        "UTCYEARQUARTERMONTH": {},
        "YEAR": {},
        "YEARMONTH": {},
        "YEARMONTHDATE": {},
        "YEARMONTHDATEHOURS": {},
        "YEARMONTHDATEHOURSMINUTES": {},
        "YEARMONTHDATEHOURSMINUTESSECONDS": {},
        "YEARQUARTER": {},
        "YEARQUARTERMONTH": {}
      },
      "containsTimeUnit": function () {},
      "convert": function () {},
      "fieldExpr": function () {},
      "formatExpression": function () {},
      "getLocalTimeUnit": function () {},
      "getTimeUnitParts": function () {},
      "isLocalSingleTimeUnit": function () {},
      "isTimeUnit": function () {},
      "isUTCTimeUnit": function () {},
      "isUtcSingleTimeUnit": function () {},
      "normalizeTimeUnit": function () {}
    },
    "transform": {
      "isAggregate": function () {},
      "isBin": function () {},
      "isCalculate": function () {},
      "isFilter": function () {},
      "isLookup": function () {},
      "isStack": function () {},
      "isTimeUnit": function () {},
      "isWindow": function () {},
      "normalizeTransform": function () {}
    },
    "type": {
      "GEOJSON": {},
      "NOMINAL": {},
      "ORDINAL": {},
      "QUANTITATIVE": {},
      "TEMPORAL": {},
      "TYPE_INDEX": {
        "geojson": {},
        "latitude": {},
        "longitude": {},
        "nominal": {},
        "ordinal": {},
        "quantitative": {},
        "temporal": {}
      },
      "Type": {
        "GEOJSON": {},
        "LATITUDE": {},
        "LONGITUDE": {},
        "NOMINAL": {},
        "ORDINAL": {},
        "QUANTITATIVE": {},
        "TEMPORAL": {}
      },
      "getFullName": function () {},
      "isType": function () {}
    },
    "util": {
      "accessPathDepth": function () {},
      "accessPathWithDatum": function () {},
      "contains": function () {},
      "deleteNestedProperty": function () {},
      "differ": function () {},
      "differArray": function () {},
      "duplicate": function () {},
      "every": function () {},
      "flagKeys": function () {},
      "flatAccessWithDatum": function () {},
      "flatten": function () {},
      "hasIntersection": function () {},
      "hash": function () {},
      "isBoolean": function () {},
      "isNumeric": function () {},
      "keys": function () {},
      "logicalExpr": function () {},
      "mergeDeep": function () {},
      "omit": function () {},
      "pick": function () {},
      "removePathFromField": function () {},
      "replacePathInField": function () {},
      "some": function () {},
      "stringify": function () {},
      "titlecase": function () {},
      "union": function () {},
      "unique": function () {},
      "vals": function () {},
      "varName": function () {},
      "without": function () {}
    },
    "validate": {
      "DEFAULT_REQUIRED_CHANNEL_MAP": {
        "area": {},
        "line": {},
        "text": {},
        "trail": {}
      },
      "DEFAULT_SUPPORTED_CHANNEL_TYPE": {
        "area": {
          "color": {},
          "column": {},
          "detail": {},
          "fill": {},
          "row": {},
          "stroke": {},
          "x": {},
          "y": {}
        },
        "bar": {
          "color": {},
          "column": {},
          "detail": {},
          "fill": {},
          "row": {},
          "size": {},
          "stroke": {},
          "x": {},
          "y": {}
        },
        "circle": {
          "color": {},
          "column": {},
          "detail": {},
          "fill": {},
          "row": {},
          "size": {},
          "stroke": {},
          "x": {},
          "y": {}
        },
        "geoshape": {
          "color": {},
          "column": {},
          "detail": {},
          "fill": {},
          "row": {},
          "shape": {},
          "stroke": {}
        },
        "line": {
          "color": {},
          "column": {},
          "detail": {},
          "fill": {},
          "row": {},
          "stroke": {},
          "x": {},
          "y": {}
        },
        "point": {
          "color": {},
          "column": {},
          "detail": {},
          "fill": {},
          "row": {},
          "shape": {},
          "size": {},
          "stroke": {},
          "x": {},
          "y": {}
        },
        "square": {
          "color": {},
          "column": {},
          "detail": {},
          "fill": {},
          "row": {},
          "size": {},
          "stroke": {},
          "x": {},
          "y": {}
        },
        "text": {
          "color": {},
          "column": {},
          "fill": {},
          "row": {},
          "size": {},
          "stroke": {},
          "text": {}
        },
        "tick": {
          "color": {},
          "column": {},
          "detail": {},
          "fill": {},
          "row": {},
          "stroke": {},
          "x": {},
          "y": {}
        },
        "trail": {
          "color": {},
          "column": {},
          "detail": {},
          "fill": {},
          "row": {},
          "size": {},
          "stroke": {},
          "x": {},
          "y": {}
        }
      },
      "getEncodingMappingError": function () {}
    },
    "version": {}
  }
};
vegaEmbed.vega.Bounds.prototype = {
  "add": function () {},
  "alignsWith": function () {},
  "clear": function () {},
  "clone": function () {},
  "contains": function () {},
  "empty": function () {},
  "encloses": function () {},
  "expand": function () {},
  "height": function () {},
  "intersect": function () {},
  "intersects": function () {},
  "rotate": function () {},
  "round": function () {},
  "set": function () {},
  "translate": function () {},
  "union": function () {},
  "width": function () {}
};
vegaEmbed.vega.CanvasHandler.prototype = {
  "DOMMouseScroll": function () {},
  "_handlerIndex": function () {},
  "canvas": function () {},
  "click": function () {},
  "constructor": function () {},
  "context": function () {},
  "dragleave": function () {},
  "dragover": function () {},
  "element": function () {},
  "eventName": function () {},
  "events": function () {},
  "fire": function () {},
  "handleHref": function () {},
  "handleTooltip": function () {},
  "handlers": function () {},
  "initialize": function () {},
  "mousedown": function () {},
  "mousemove": function () {},
  "mouseout": function () {},
  "off": function () {},
  "on": function () {},
  "origin": function () {},
  "pick": function () {},
  "pickEvent": function () {},
  "scene": function () {},
  "touchend": function () {},
  "touchmove": function () {},
  "touchstart": function () {}
};
vegaEmbed.vega.CanvasRenderer.prototype = {
  "_load": function () {},
  "_render": function () {},
  "background": function () {},
  "canvas": function () {},
  "clear": function () {},
  "constructor": function () {},
  "context": function () {},
  "dirty": function () {},
  "draw": function () {},
  "element": function () {},
  "initialize": function () {},
  "loadImage": function () {},
  "render": function () {},
  "renderAsync": function () {},
  "resize": function () {},
  "sanitizeURL": function () {},
  "scene": function () {}
};
vegaEmbed.vega.Dataflow.prototype = {
  "_enqueue": function () {},
  "_getPulse": function () {},
  "add": function () {},
  "changeset": function () {},
  "cleanThreshold": function () {},
  "connect": function () {},
  "debug": function () {},
  "error": function () {},
  "events": function () {},
  "info": function () {},
  "ingest": function () {},
  "loader": function () {},
  "logLevel": function () {},
  "on": function () {},
  "pulse": function () {},
  "rank": function () {},
  "request": function () {},
  "rerank": function () {},
  "run": function () {},
  "runAfter": function () {},
  "runAsync": function () {},
  "stamp": function () {},
  "touch": function () {},
  "update": function () {},
  "warn": function () {}
};
vegaEmbed.vega.EventStream.prototype = {
  "_apply": function () {},
  "_filter": function () {},
  "apply": function () {},
  "between": function () {},
  "consume": function () {},
  "debounce": function () {},
  "filter": function () {},
  "merge": function () {},
  "receive": function () {},
  "targets": function () {},
  "throttle": function () {}
};
vegaEmbed.vega.GroupItem.prototype = {
  "constructor": function () {}
};
vegaEmbed.vega.Handler.prototype = {
  "_handlerIndex": function () {},
  "element": function () {},
  "eventName": function () {},
  "handleHref": function () {},
  "handleTooltip": function () {},
  "handlers": function () {},
  "initialize": function () {},
  "off": function () {},
  "on": function () {},
  "origin": function () {},
  "scene": function () {}
};
vegaEmbed.vega.MultiPulse.prototype = {
  "ADD": function () {},
  "ADD_MOD": function () {},
  "ADD_REM": function () {},
  "ALL": function () {},
  "MOD": function () {},
  "NO_FIELDS": function () {},
  "NO_SOURCE": function () {},
  "REFLOW": function () {},
  "REM": function () {},
  "SOURCE": function () {},
  "StopPropagation": function () {},
  "addAll": function () {},
  "changed": function () {},
  "clone": function () {},
  "constructor": function () {},
  "filter": function () {},
  "fork": function () {},
  "init": function () {},
  "materialize": function () {},
  "modified": function () {},
  "modifies": function () {},
  "reflow": function () {},
  "runAfter": function () {},
  "visit": function () {}
};
vegaEmbed.vega.Operator.prototype = {
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {}
};
vegaEmbed.vega.Parameters.prototype = {
  "clear": function () {},
  "modified": function () {},
  "set": function () {}
};
vegaEmbed.vega.Pulse.prototype = {
  "ADD": function () {},
  "ADD_MOD": function () {},
  "ADD_REM": function () {},
  "ALL": function () {},
  "MOD": function () {},
  "NO_FIELDS": function () {},
  "NO_SOURCE": function () {},
  "REFLOW": function () {},
  "REM": function () {},
  "SOURCE": function () {},
  "StopPropagation": function () {},
  "addAll": function () {},
  "changed": function () {},
  "clone": function () {},
  "filter": function () {},
  "fork": function () {},
  "init": function () {},
  "materialize": function () {},
  "modified": function () {},
  "modifies": function () {},
  "reflow": function () {},
  "runAfter": function () {},
  "visit": function () {}
};
vegaEmbed.vega.Renderer.prototype = {
  "_load": function () {},
  "_render": function () {},
  "background": function () {},
  "dirty": function () {},
  "element": function () {},
  "initialize": function () {},
  "loadImage": function () {},
  "render": function () {},
  "renderAsync": function () {},
  "resize": function () {},
  "sanitizeURL": function () {},
  "scene": function () {}
};
vegaEmbed.vega.ResourceLoader.prototype = {
  "loadImage": function () {},
  "pending": function () {},
  "ready": function () {},
  "sanitizeURL": function () {}
};
vegaEmbed.vega.SVGHandler.prototype = {
  "_handlerIndex": function () {},
  "constructor": function () {},
  "element": function () {},
  "eventName": function () {},
  "handleHref": function () {},
  "handleTooltip": function () {},
  "handlers": function () {},
  "initialize": function () {},
  "off": function () {},
  "on": function () {},
  "origin": function () {},
  "scene": function () {},
  "svg": function () {}
};
vegaEmbed.vega.SVGRenderer.prototype = {
  "_dirtyCheck": function () {},
  "_load": function () {},
  "_render": function () {},
  "_resetDefs": function () {},
  "_update": function () {},
  "background": function () {},
  "constructor": function () {},
  "dirty": function () {},
  "draw": function () {},
  "element": function () {},
  "initialize": function () {},
  "isDirty": function () {},
  "loadImage": function () {},
  "render": function () {},
  "renderAsync": function () {},
  "resize": function () {},
  "sanitizeURL": function () {},
  "scene": function () {},
  "style": function () {},
  "svg": function () {},
  "updateDefs": function () {}
};
vegaEmbed.vega.SVGStringRenderer.prototype = {
  "_load": function () {},
  "_render": function () {},
  "attributes": function () {},
  "background": function () {},
  "buildDefs": function () {},
  "constructor": function () {},
  "dirty": function () {},
  "element": function () {},
  "href": function () {},
  "initialize": function () {},
  "loadImage": function () {},
  "mark": function () {},
  "markGroup": function () {},
  "render": function () {},
  "renderAsync": function () {},
  "resize": function () {},
  "sanitizeURL": function () {},
  "scene": function () {},
  "svg": function () {}
};
vegaEmbed.vega.Scenegraph.prototype = {
  "mark": function () {},
  "toJSON": function () {}
};
vegaEmbed.vega.Transform.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.View.prototype = {
  "_enqueue": function () {},
  "_getPulse": function () {},
  "_resetRenderer": function () {},
  "_resizeView": function () {},
  "add": function () {},
  "addEventListener": function () {},
  "addResizeListener": function () {},
  "addSignalListener": function () {},
  "autosize": function () {},
  "background": function () {},
  "change": function () {},
  "changeset": function () {},
  "cleanThreshold": function () {},
  "connect": function () {},
  "constructor": function () {},
  "container": function () {},
  "data": function () {},
  "debug": function () {},
  "dirty": function () {},
  "error": function () {},
  "events": function () {},
  "finalize": function () {},
  "getState": function () {},
  "height": function () {},
  "hover": function () {},
  "info": function () {},
  "ingest": function () {},
  "initialize": function () {},
  "insert": function () {},
  "loader": function () {},
  "logLevel": function () {},
  "on": function () {},
  "origin": function () {},
  "padding": function () {},
  "preventDefault": function () {},
  "pulse": function () {},
  "rank": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "removeResizeListener": function () {},
  "removeSignalListener": function () {},
  "render": function () {},
  "renderer": function () {},
  "request": function () {},
  "rerank": function () {},
  "resize": function () {},
  "run": function () {},
  "runAfter": function () {},
  "runAsync": function () {},
  "scenegraph": function () {},
  "setState": function () {},
  "signal": function () {},
  "stamp": function () {},
  "toCanvas": function () {},
  "toImageURL": function () {},
  "toSVG": function () {},
  "tooltip": function () {},
  "tooltipHandler": function () {},
  "touch": function () {},
  "update": function () {},
  "warn": function () {},
  "width": function () {}
};
vegaEmbed.vega.transforms.aggregate.prototype = {
  "add": function () {},
  "cell": function () {},
  "cellkey": function () {},
  "celltuple": function () {},
  "changes": function () {},
  "constructor": function () {},
  "cross": function () {},
  "evaluate": function () {},
  "init": function () {},
  "marshall": function () {},
  "modified": function () {},
  "newcell": function () {},
  "newtuple": function () {},
  "parameters": function () {},
  "rem": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.axisticks.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.bin.prototype = {
  "_bins": function () {},
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.bound.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.collect.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.compare.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {}
};
vegaEmbed.vega.transforms.contour.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.countpattern.prototype = {
  "_finish": function () {},
  "_parameterCheck": function () {},
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.cross.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.crossfilter.prototype = {
  "constructor": function () {},
  "eval": function () {},
  "evaluate": function () {},
  "incrementAll": function () {},
  "incrementOne": function () {},
  "init": function () {},
  "insert": function () {},
  "marshall": function () {},
  "modified": function () {},
  "modify": function () {},
  "parameters": function () {},
  "reindex": function () {},
  "reinit": function () {},
  "remove": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {},
  "update": function () {}
};
vegaEmbed.vega.transforms.datajoin.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.density.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.encode.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.extent.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.facet.prototype = {
  "activate": function () {},
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "subflow": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.field.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {}
};
vegaEmbed.vega.transforms.filter.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.flatten.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.fold.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.force.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "finish": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.formula.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.generate.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.geojson.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.geopath.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.geopoint.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.geoshape.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.graticule.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.identifier.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.impute.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.joinaggregate.prototype = {
  "add": function () {},
  "cell": function () {},
  "cellkey": function () {},
  "celltuple": function () {},
  "changes": function () {},
  "constructor": function () {},
  "cross": function () {},
  "evaluate": function () {},
  "init": function () {},
  "marshall": function () {},
  "modified": function () {},
  "newcell": function () {},
  "newtuple": function () {},
  "parameters": function () {},
  "rem": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.key.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {}
};
vegaEmbed.vega.transforms.legendentries.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.linkpath.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.lookup.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.mark.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.multiextent.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {}
};
vegaEmbed.vega.transforms.multivalues.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {}
};
vegaEmbed.vega.transforms.nest.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.overlap.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.pack.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "fields": function () {},
  "layout": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "params": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.params.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.partition.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "fields": function () {},
  "layout": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "params": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.pie.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.pivot.prototype = {
  "_transform": function () {},
  "add": function () {},
  "cell": function () {},
  "cellkey": function () {},
  "celltuple": function () {},
  "changes": function () {},
  "constructor": function () {},
  "cross": function () {},
  "evaluate": function () {},
  "init": function () {},
  "marshall": function () {},
  "modified": function () {},
  "newcell": function () {},
  "newtuple": function () {},
  "parameters": function () {},
  "rem": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.prefacet.prototype = {
  "activate": function () {},
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "subflow": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.project.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.projection.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.proxy.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.relay.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.render.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.resolvefilter.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.sample.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.scale.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.sequence.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.sieve.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.sortitems.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.stack.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.stratify.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.subflow.prototype = {
  "add": function () {},
  "connect": function () {},
  "constructor": function () {},
  "evaluate": function () {},
  "init": function () {},
  "marshall": function () {},
  "mod": function () {},
  "modified": function () {},
  "parameters": function () {},
  "rem": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {}
};
vegaEmbed.vega.transforms.tree.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "fields": function () {},
  "layout": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "params": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.treelinks.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.treemap.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "fields": function () {},
  "layout": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "params": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.tupleindex.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.values.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.viewlayout.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.voronoi.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.window.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "group": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.wordcloud.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
/**********************************************************************
 * End Generated Extern for vegaEmbed
 **********************************************************************/
