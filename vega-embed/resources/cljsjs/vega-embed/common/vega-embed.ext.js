/**********************************************************************
 * Extern for vegaEmbed
 * Generated by http://jmmk.github.io/javascript-externs-generator
 **********************************************************************/
var vegaEmbed = {
  "container": function () {},
  "default": function () {},
  "embed": function () {},
  "vega": {
    "Bounds": function () {},
    "CanvasHandler": function () {},
    "CanvasRenderer": function () {},
    "DATE": {},
    "DAY": {},
    "DAYOFYEAR": {},
    "Dataflow": function () {},
    "Debug": {},
    "Error": {},
    "EventStream": function () {},
    "Gradient": function () {},
    "GroupItem": function () {},
    "HOURS": {},
    "Handler": function () {},
    "Info": {},
    "Item": function () {},
    "MILLISECONDS": {},
    "MINUTES": {},
    "MONTH": {},
    "Marks": {
      "arc": {
        "attr": function () {},
        "bound": function () {},
        "draw": function () {},
        "isect": function () {},
        "nested": {},
        "pick": function () {},
        "tag": {},
        "type": {}
      },
      "area": {
        "attr": function () {},
        "bound": function () {},
        "draw": function () {},
        "isect": function () {},
        "nested": {},
        "pick": function () {},
        "tag": {},
        "tip": function () {},
        "type": {}
      },
      "group": {
        "attr": function () {},
        "background": function () {},
        "bound": function () {},
        "content": function () {},
        "draw": function () {},
        "foreground": function () {},
        "isect": function () {},
        "nested": {},
        "pick": function () {},
        "tag": {},
        "type": {}
      },
      "image": {
        "attr": function () {},
        "bound": function () {},
        "draw": function () {},
        "get": function () {},
        "isect": {
          "fields": {},
          "fname": {}
        },
        "nested": {},
        "pick": function () {},
        "tag": {},
        "type": {},
        "xOffset": function () {},
        "yOffset": function () {}
      },
      "line": {
        "attr": function () {},
        "bound": function () {},
        "draw": function () {},
        "isect": function () {},
        "nested": {},
        "pick": function () {},
        "tag": {},
        "tip": function () {},
        "type": {}
      },
      "path": {
        "attr": function () {},
        "bound": function () {},
        "draw": function () {},
        "isect": function () {},
        "nested": {},
        "pick": function () {},
        "tag": {},
        "type": {}
      },
      "rect": {
        "attr": function () {},
        "bound": function () {},
        "draw": function () {},
        "isect": function () {},
        "nested": {},
        "pick": function () {},
        "tag": {},
        "type": {}
      },
      "rule": {
        "attr": function () {},
        "bound": function () {},
        "draw": function () {},
        "isect": function () {},
        "nested": {},
        "pick": function () {},
        "tag": {},
        "type": {}
      },
      "shape": {
        "attr": function () {},
        "bound": function () {},
        "draw": function () {},
        "isect": function () {},
        "nested": {},
        "pick": function () {},
        "tag": {},
        "type": {}
      },
      "symbol": {
        "attr": function () {},
        "bound": function () {},
        "draw": function () {},
        "isect": function () {},
        "nested": {},
        "pick": function () {},
        "tag": {},
        "type": {}
      },
      "text": {
        "attr": function () {},
        "bound": function () {},
        "draw": function () {},
        "isect": function () {},
        "nested": {},
        "pick": function () {},
        "tag": {},
        "type": {}
      },
      "trail": {
        "attr": function () {},
        "bound": function () {},
        "draw": function () {},
        "isect": function () {},
        "nested": {},
        "pick": function () {},
        "tag": {},
        "tip": function () {},
        "type": {}
      }
    },
    "MultiPulse": function () {},
    "None": {},
    "Operator": function () {},
    "Parameters": function () {},
    "Pulse": function () {},
    "QUARTER": {},
    "RenderType": {
      "Canvas": {},
      "None": {},
      "PNG": {},
      "SVG": {}
    },
    "Renderer": function () {},
    "ResourceLoader": function () {},
    "SECONDS": {},
    "SVGHandler": function () {},
    "SVGRenderer": function () {},
    "SVGStringRenderer": function () {},
    "Scenegraph": function () {},
    "TIME_UNITS": {},
    "Transform": function () {},
    "View": function () {},
    "WEEK": {},
    "Warn": {},
    "YEAR": {},
    "accessor": function () {},
    "accessorFields": function () {},
    "accessorName": function () {},
    "array": function () {},
    "ascending": function () {},
    "bandwidthNRD": function () {},
    "bin": function () {},
    "bootstrapCI": function () {},
    "boundClip": function () {},
    "boundContext": function () {},
    "boundItem": function () {},
    "boundMark": function () {},
    "boundStroke": function () {},
    "changeset": function () {},
    "clampRange": function () {},
    "compare": function () {},
    "constant": function () {},
    "cumulativeLogNormal": function () {},
    "cumulativeNormal": function () {},
    "cumulativeUniform": function () {},
    "dayofyear": function () {},
    "debounce": function () {},
    "defaultLocale": function () {},
    "definition": function () {},
    "densityLogNormal": function () {},
    "densityNormal": function () {},
    "densityUniform": function () {},
    "domChild": function () {},
    "domClear": function () {},
    "domCreate": function () {},
    "domFind": function () {},
    "dotbin": function () {},
    "error": function () {},
    "expressionFunction": function () {},
    "extend": function () {},
    "extent": function () {},
    "extentIndex": function () {},
    "falsy": {
      "fields": {},
      "fname": {}
    },
    "fastmap": function () {},
    "field": function () {},
    "flush": function () {},
    "font": function () {},
    "fontFamily": function () {},
    "fontSize": function () {},
    "format": {
      "csv": {
        "responseType": {}
      },
      "dsv": {
        "responseType": {}
      },
      "json": {
        "responseType": {}
      },
      "topojson": {
        "responseType": {}
      },
      "tsv": {
        "responseType": {}
      }
    },
    "formatLocale": function () {},
    "formats": function () {},
    "hasOwnProperty": function () {},
    "id": {
      "fields": {},
      "fname": {}
    },
    "identity": {
      "fields": {},
      "fname": {}
    },
    "inferType": function () {},
    "inferTypes": function () {},
    "ingest": function () {},
    "inherits": function () {},
    "inrange": function () {},
    "interpolate": function () {},
    "interpolateColors": function () {},
    "interpolateRange": function () {},
    "intersect": function () {},
    "intersectBoxLine": function () {},
    "intersectPath": function () {},
    "intersectPoint": function () {},
    "intersectRule": function () {},
    "isArray": function () {},
    "isBoolean": function () {},
    "isDate": function () {},
    "isFunction": function () {},
    "isIterable": function () {},
    "isNumber": function () {},
    "isObject": function () {},
    "isRegExp": function () {},
    "isString": function () {},
    "isTuple": function () {},
    "key": function () {},
    "lerp": function () {},
    "lineHeight": function () {},
    "loader": function () {},
    "locale": function () {},
    "logger": function () {},
    "lruCache": function () {},
    "markup": function () {},
    "merge": function () {},
    "mergeConfig": function () {},
    "multiLineOffset": function () {},
    "one": {
      "fields": {},
      "fname": {}
    },
    "pad": function () {},
    "panLinear": function () {},
    "panLog": function () {},
    "panPow": function () {},
    "panSymlog": function () {},
    "parse": function () {},
    "pathCurves": function () {},
    "pathEqual": function () {},
    "pathParse": function () {},
    "pathRectangle": function () {},
    "pathRender": function () {},
    "pathSymbols": function () {},
    "pathTrail": function () {},
    "peek": function () {},
    "point": function () {},
    "projection": function () {},
    "quantileLogNormal": function () {},
    "quantileNormal": function () {},
    "quantileUniform": function () {},
    "quantiles": function () {},
    "quantizeInterpolator": function () {},
    "quarter": function () {},
    "quartiles": function () {},
    "random": function () {},
    "randomInteger": function () {},
    "randomKDE": function () {},
    "randomLCG": function () {},
    "randomLogNormal": function () {},
    "randomMixture": function () {},
    "randomNormal": function () {},
    "randomUniform": function () {},
    "read": function () {},
    "regressionExp": function () {},
    "regressionLinear": function () {},
    "regressionLoess": function () {},
    "regressionLog": function () {},
    "regressionPoly": function () {},
    "regressionPow": function () {},
    "regressionQuad": function () {},
    "renderModule": function () {},
    "repeat": function () {},
    "resetDefaultLocale": function () {},
    "resetSVGClipId": function () {},
    "resetSVGDefIds": function () {},
    "responseType": function () {},
    "runtimeContext": function () {},
    "sampleCurve": function () {},
    "sampleLogNormal": function () {},
    "sampleNormal": function () {},
    "sampleUniform": function () {},
    "scale": function () {},
    "sceneEqual": function () {},
    "sceneFromJSON": function () {},
    "scenePickVisit": function () {},
    "sceneToJSON": function () {},
    "sceneVisit": function () {},
    "sceneZOrder": function () {},
    "scheme": function () {},
    "serializeXML": function () {},
    "setRandom": function () {},
    "span": function () {},
    "splitAccessPath": function () {},
    "stringValue": function () {},
    "textMetrics": {
      "canvas": function () {},
      "estimateWidth": function () {},
      "height": function () {},
      "measureWidth": function () {},
      "width": function () {}
    },
    "timeBin": function () {},
    "timeFloor": function () {},
    "timeFormatLocale": function () {},
    "timeInterval": function () {},
    "timeOffset": function () {},
    "timeSequence": function () {},
    "timeUnitSpecifier": function () {},
    "timeUnits": function () {},
    "toBoolean": function () {},
    "toDate": function () {},
    "toNumber": function () {},
    "toSet": function () {},
    "toString": function () {},
    "transform": function () {},
    "transforms": {
      "aggregate": {
        "Definition": {
          "metadata": {
            "changes": {},
            "generates": {}
          },
          "params": {},
          "type": {}
        }
      },
      "axisticks": function () {},
      "bin": {
        "Definition": {
          "metadata": {
            "modifies": {}
          },
          "params": {},
          "type": {}
        }
      },
      "bound": function () {},
      "collect": {
        "Definition": {
          "metadata": {
            "source": {}
          },
          "params": {},
          "type": {}
        }
      },
      "compare": function () {},
      "contour": {
        "Definition": {
          "metadata": {
            "generates": {}
          },
          "params": {},
          "type": {}
        }
      },
      "countpattern": {
        "Definition": {
          "metadata": {
            "changes": {},
            "generates": {}
          },
          "params": {},
          "type": {}
        }
      },
      "cross": {
        "Definition": {
          "metadata": {
            "generates": {}
          },
          "params": {},
          "type": {}
        }
      },
      "crossfilter": {
        "Definition": {
          "metadata": {},
          "params": {},
          "type": {}
        }
      },
      "datajoin": function () {},
      "density": {
        "Definition": {
          "metadata": {
            "generates": {}
          },
          "params": {},
          "type": {}
        }
      },
      "dotbin": {
        "Definition": {
          "metadata": {
            "modifies": {}
          },
          "params": {},
          "type": {}
        }
      },
      "encode": function () {},
      "expression": function () {},
      "extent": {
        "Definition": {
          "metadata": {},
          "params": {},
          "type": {}
        }
      },
      "facet": function () {},
      "field": function () {},
      "filter": {
        "Definition": {
          "metadata": {
            "changes": {}
          },
          "params": {},
          "type": {}
        }
      },
      "flatten": {
        "Definition": {
          "metadata": {
            "generates": {}
          },
          "params": {},
          "type": {}
        }
      },
      "fold": {
        "Definition": {
          "metadata": {
            "generates": {}
          },
          "params": {},
          "type": {}
        }
      },
      "force": {
        "Definition": {
          "metadata": {
            "modifies": {}
          },
          "params": {},
          "type": {}
        }
      },
      "formula": {
        "Definition": {
          "metadata": {
            "modifies": {}
          },
          "params": {},
          "type": {}
        }
      },
      "generate": function () {},
      "geojson": {
        "Definition": {
          "metadata": {},
          "params": {},
          "type": {}
        }
      },
      "geopath": {
        "Definition": {
          "metadata": {
            "modifies": {}
          },
          "params": {},
          "type": {}
        }
      },
      "geopoint": {
        "Definition": {
          "metadata": {
            "modifies": {}
          },
          "params": {},
          "type": {}
        }
      },
      "geoshape": {
        "Definition": {
          "metadata": {
            "modifies": {},
            "nomod": {}
          },
          "params": {},
          "type": {}
        }
      },
      "graticule": {
        "Definition": {
          "metadata": {
            "changes": {},
            "generates": {}
          },
          "params": {},
          "type": {}
        }
      },
      "heatmap": {
        "Definition": {
          "metadata": {
            "modifies": {}
          },
          "params": {},
          "type": {}
        }
      },
      "identifier": {
        "Definition": {
          "metadata": {
            "modifies": {}
          },
          "params": {},
          "type": {}
        }
      },
      "impute": {
        "Definition": {
          "metadata": {
            "changes": {}
          },
          "params": {},
          "type": {}
        }
      },
      "isocontour": {
        "Definition": {
          "metadata": {
            "generates": {}
          },
          "params": {},
          "type": {}
        }
      },
      "joinaggregate": {
        "Definition": {
          "metadata": {
            "modifies": {}
          },
          "params": {},
          "type": {}
        }
      },
      "kde": {
        "Definition": {
          "metadata": {
            "generates": {}
          },
          "params": {},
          "type": {}
        }
      },
      "kde2d": {
        "Definition": {
          "metadata": {
            "generates": {}
          },
          "params": {},
          "type": {}
        }
      },
      "key": function () {},
      "label": {
        "Definition": {
          "metadata": {
            "modifies": {}
          },
          "params": {},
          "type": {}
        }
      },
      "legendentries": function () {},
      "linkpath": {
        "Definition": {
          "metadata": {
            "modifies": {}
          },
          "params": {},
          "type": {}
        }
      },
      "load": function () {},
      "loess": {
        "Definition": {
          "metadata": {
            "generates": {}
          },
          "params": {},
          "type": {}
        }
      },
      "lookup": {
        "Definition": {
          "metadata": {
            "modifies": {}
          },
          "params": {},
          "type": {}
        }
      },
      "mark": function () {},
      "multiextent": function () {},
      "multivalues": function () {},
      "nest": {
        "Definition": {
          "metadata": {
            "changes": {},
            "treesource": {}
          },
          "params": {},
          "type": {}
        }
      },
      "overlap": function () {},
      "pack": {
        "Definition": {
          "metadata": {
            "modifies": {},
            "tree": {}
          },
          "params": {},
          "type": {}
        }
      },
      "params": function () {},
      "partition": {
        "Definition": {
          "metadata": {
            "modifies": {},
            "tree": {}
          },
          "params": {},
          "type": {}
        }
      },
      "pie": {
        "Definition": {
          "metadata": {
            "modifies": {}
          },
          "params": {},
          "type": {}
        }
      },
      "pivot": {
        "Definition": {
          "metadata": {
            "changes": {},
            "generates": {}
          },
          "params": {},
          "type": {}
        }
      },
      "prefacet": function () {},
      "project": {
        "Definition": {
          "metadata": {
            "changes": {},
            "generates": {}
          },
          "params": {},
          "type": {}
        }
      },
      "projection": function () {},
      "proxy": function () {},
      "quantile": {
        "Definition": {
          "metadata": {
            "changes": {},
            "generates": {}
          },
          "params": {},
          "type": {}
        }
      },
      "regression": {
        "Definition": {
          "metadata": {
            "generates": {}
          },
          "params": {},
          "type": {}
        }
      },
      "relay": function () {},
      "render": function () {},
      "resolvefilter": {
        "Definition": {
          "metadata": {},
          "params": {},
          "type": {}
        }
      },
      "sample": {
        "Definition": {
          "metadata": {},
          "params": {},
          "type": {}
        }
      },
      "scale": function () {},
      "sequence": {
        "Definition": {
          "metadata": {
            "changes": {},
            "generates": {}
          },
          "params": {},
          "type": {}
        }
      },
      "sieve": function () {},
      "sortitems": function () {},
      "stack": {
        "Definition": {
          "metadata": {
            "modifies": {}
          },
          "params": {},
          "type": {}
        }
      },
      "stratify": {
        "Definition": {
          "metadata": {
            "treesource": {}
          },
          "params": {},
          "type": {}
        }
      },
      "subflow": function () {},
      "timeunit": {
        "Definition": {
          "metadata": {
            "modifies": {}
          },
          "params": {},
          "type": {}
        }
      },
      "tree": {
        "Definition": {
          "metadata": {
            "modifies": {},
            "tree": {}
          },
          "params": {},
          "type": {}
        }
      },
      "treelinks": {
        "Definition": {
          "metadata": {
            "changes": {},
            "generates": {},
            "tree": {}
          },
          "params": {},
          "type": {}
        }
      },
      "treemap": {
        "Definition": {
          "metadata": {
            "modifies": {},
            "tree": {}
          },
          "params": {},
          "type": {}
        }
      },
      "tupleindex": function () {},
      "values": function () {},
      "viewlayout": function () {},
      "voronoi": {
        "Definition": {
          "metadata": {
            "modifies": {}
          },
          "params": {},
          "type": {}
        }
      },
      "window": {
        "Definition": {
          "metadata": {
            "modifies": {}
          },
          "params": {},
          "type": {}
        }
      },
      "wordcloud": {
        "Definition": {
          "metadata": {
            "modifies": {}
          },
          "params": {},
          "type": {}
        }
      }
    },
    "truncate": function () {},
    "truthy": {
      "fields": {},
      "fname": {}
    },
    "tupleid": function () {},
    "typeParsers": {
      "boolean": function () {},
      "date": function () {},
      "integer": function () {},
      "number": function () {},
      "string": function () {},
      "unknown": {
        "fields": {},
        "fname": {}
      }
    },
    "utcFloor": function () {},
    "utcInterval": function () {},
    "utcOffset": function () {},
    "utcSequence": function () {},
    "utcdayofyear": function () {},
    "utcquarter": function () {},
    "utcweek": function () {},
    "version": {},
    "visitArray": function () {},
    "week": function () {},
    "writeConfig": function () {},
    "zero": {
      "fields": {},
      "fname": {}
    },
    "zoomLinear": function () {},
    "zoomLog": function () {},
    "zoomPow": function () {},
    "zoomSymlog": function () {}
  },
  "vegaLite": {
    "accessPathDepth": function () {},
    "accessPathWithDatum": function () {},
    "compile": function () {},
    "contains": function () {},
    "deepEqual": function () {},
    "deleteNestedProperty": function () {},
    "duplicate": {
      "__getRegExpFlags": function () {},
      "__isArray": function () {},
      "__isDate": function () {},
      "__isRegExp": function () {},
      "__objToStr": function () {},
      "clonePrototype": function () {}
    },
    "entries": function () {},
    "every": function () {},
    "fieldIntersection": function () {},
    "flatAccessWithDatum": function () {},
    "getFirstDefined": function () {},
    "hasIntersection": function () {},
    "hash": function () {},
    "internalField": function () {},
    "isBoolean": function () {},
    "isEmpty": function () {},
    "isEqual": function () {},
    "isInternalField": function () {},
    "isNullOrFalse": function () {},
    "isNumeric": function () {},
    "keys": function () {},
    "logicalExpr": function () {},
    "mergeDeep": function () {},
    "normalize": function () {},
    "normalizeAngle": function () {},
    "omit": function () {},
    "pick": function () {},
    "prefixGenerator": function () {},
    "removePathFromField": function () {},
    "replaceAll": function () {},
    "replacePathInField": function () {},
    "resetIdCounter": function () {},
    "setEqual": function () {},
    "some": function () {},
    "stringify": function () {},
    "titleCase": function () {},
    "unique": function () {},
    "uniqueId": function () {},
    "vals": function () {},
    "varName": function () {},
    "version": {}
  },
  "version": {},
  "vl": {
    "accessPathDepth": function () {},
    "accessPathWithDatum": function () {},
    "compile": function () {},
    "contains": function () {},
    "deepEqual": function () {},
    "deleteNestedProperty": function () {},
    "duplicate": {
      "__getRegExpFlags": function () {},
      "__isArray": function () {},
      "__isDate": function () {},
      "__isRegExp": function () {},
      "__objToStr": function () {},
      "clonePrototype": function () {}
    },
    "entries": function () {},
    "every": function () {},
    "fieldIntersection": function () {},
    "flatAccessWithDatum": function () {},
    "getFirstDefined": function () {},
    "hasIntersection": function () {},
    "hash": function () {},
    "internalField": function () {},
    "isBoolean": function () {},
    "isEmpty": function () {},
    "isEqual": function () {},
    "isInternalField": function () {},
    "isNullOrFalse": function () {},
    "isNumeric": function () {},
    "keys": function () {},
    "logicalExpr": function () {},
    "mergeDeep": function () {},
    "normalize": function () {},
    "normalizeAngle": function () {},
    "omit": function () {},
    "pick": function () {},
    "prefixGenerator": function () {},
    "removePathFromField": function () {},
    "replaceAll": function () {},
    "replacePathInField": function () {},
    "resetIdCounter": function () {},
    "setEqual": function () {},
    "some": function () {},
    "stringify": function () {},
    "titleCase": function () {},
    "unique": function () {},
    "uniqueId": function () {},
    "vals": function () {},
    "varName": function () {},
    "version": {}
  }
};
vegaEmbed.vega.Bounds.prototype = {
  "add": function () {},
  "alignsWith": function () {},
  "clear": function () {},
  "clone": function () {},
  "contains": function () {},
  "empty": function () {},
  "encloses": function () {},
  "equals": function () {},
  "expand": function () {},
  "height": function () {},
  "intersect": function () {},
  "intersects": function () {},
  "rotate": function () {},
  "rotatedPoints": function () {},
  "round": function () {},
  "scale": function () {},
  "set": function () {},
  "translate": function () {},
  "union": function () {},
  "width": function () {}
};
vegaEmbed.vega.CanvasHandler.prototype = {
  "DOMMouseScroll": function () {},
  "_handlerIndex": function () {},
  "canvas": function () {},
  "click": function () {},
  "constructor": function () {},
  "context": function () {},
  "dragleave": function () {},
  "dragover": function () {},
  "element": function () {},
  "eventName": function () {},
  "events": function () {},
  "fire": function () {},
  "getItemBoundingClientRect": function () {},
  "handleHref": function () {},
  "handleTooltip": function () {},
  "handlers": function () {},
  "initialize": function () {},
  "mousedown": function () {},
  "mousemove": function () {},
  "mouseout": function () {},
  "off": function () {},
  "on": function () {},
  "origin": function () {},
  "pick": function () {},
  "pickEvent": function () {},
  "scene": function () {},
  "touchend": function () {},
  "touchmove": function () {},
  "touchstart": function () {}
};
vegaEmbed.vega.CanvasRenderer.prototype = {
  "_load": function () {},
  "_render": function () {},
  "background": function () {},
  "canvas": function () {},
  "clear": function () {},
  "constructor": function () {},
  "context": function () {},
  "dirty": function () {},
  "draw": function () {},
  "element": function () {},
  "initialize": function () {},
  "loadImage": function () {},
  "render": function () {},
  "renderAsync": function () {},
  "resize": function () {},
  "sanitizeURL": function () {}
};
vegaEmbed.vega.Dataflow.prototype = {
  "_enqueue": function () {},
  "_getPulse": function () {},
  "add": function () {},
  "changeset": function () {},
  "cleanThreshold": function () {},
  "connect": function () {},
  "debug": function () {},
  "error": function () {},
  "evaluate": function () {},
  "events": function () {},
  "info": function () {},
  "ingest": function () {},
  "loader": function () {},
  "locale": function () {},
  "logLevel": function () {},
  "logger": function () {},
  "on": function () {},
  "parse": function () {},
  "preload": function () {},
  "pulse": function () {},
  "rank": function () {},
  "request": function () {},
  "rerank": function () {},
  "run": function () {},
  "runAfter": function () {},
  "runAsync": function () {},
  "stamp": function () {},
  "touch": function () {},
  "update": function () {},
  "warn": function () {}
};
vegaEmbed.vega.EventStream.prototype = {
  "_apply": function () {},
  "_filter": function () {},
  "apply": function () {},
  "between": function () {},
  "consume": function () {},
  "debounce": function () {},
  "detach": function () {},
  "filter": function () {},
  "merge": function () {},
  "receive": function () {},
  "targets": function () {},
  "throttle": function () {}
};
vegaEmbed.vega.GroupItem.prototype = {
  "constructor": function () {}
};
vegaEmbed.vega.Handler.prototype = {
  "_handlerIndex": function () {},
  "canvas": function () {},
  "element": function () {},
  "eventName": function () {},
  "getItemBoundingClientRect": function () {},
  "handleHref": function () {},
  "handleTooltip": function () {},
  "handlers": function () {},
  "initialize": function () {},
  "off": function () {},
  "on": function () {},
  "origin": function () {},
  "scene": function () {}
};
vegaEmbed.vega.MultiPulse.prototype = {
  "ADD": function () {},
  "ADD_MOD": function () {},
  "ADD_REM": function () {},
  "ALL": function () {},
  "MOD": function () {},
  "NO_FIELDS": function () {},
  "NO_SOURCE": function () {},
  "REFLOW": function () {},
  "REM": function () {},
  "SOURCE": function () {},
  "StopPropagation": function () {},
  "addAll": function () {},
  "changed": function () {},
  "clean": function () {},
  "clone": function () {},
  "constructor": function () {},
  "filter": function () {},
  "fork": function () {},
  "init": function () {},
  "materialize": function () {},
  "modified": function () {},
  "modifies": function () {},
  "reflow": function () {},
  "runAfter": function () {},
  "visit": function () {}
};
vegaEmbed.vega.Operator.prototype = {
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {}
};
vegaEmbed.vega.Parameters.prototype = {
  "clear": function () {},
  "modified": function () {},
  "set": function () {}
};
vegaEmbed.vega.Pulse.prototype = {
  "ADD": function () {},
  "ADD_MOD": function () {},
  "ADD_REM": function () {},
  "ALL": function () {},
  "MOD": function () {},
  "NO_FIELDS": function () {},
  "NO_SOURCE": function () {},
  "REFLOW": function () {},
  "REM": function () {},
  "SOURCE": function () {},
  "StopPropagation": function () {},
  "addAll": function () {},
  "changed": function () {},
  "clean": function () {},
  "clone": function () {},
  "filter": function () {},
  "fork": function () {},
  "init": function () {},
  "materialize": function () {},
  "modified": function () {},
  "modifies": function () {},
  "reflow": function () {},
  "runAfter": function () {},
  "visit": function () {}
};
vegaEmbed.vega.Renderer.prototype = {
  "_load": function () {},
  "_render": function () {},
  "background": function () {},
  "canvas": function () {},
  "dirty": function () {},
  "element": function () {},
  "initialize": function () {},
  "loadImage": function () {},
  "render": function () {},
  "renderAsync": function () {},
  "resize": function () {},
  "sanitizeURL": function () {}
};
vegaEmbed.vega.ResourceLoader.prototype = {
  "loadImage": function () {},
  "pending": function () {},
  "ready": function () {},
  "sanitizeURL": function () {}
};
vegaEmbed.vega.SVGHandler.prototype = {
  "_handlerIndex": function () {},
  "canvas": function () {},
  "constructor": function () {},
  "element": function () {},
  "eventName": function () {},
  "getItemBoundingClientRect": function () {},
  "handleHref": function () {},
  "handleTooltip": function () {},
  "handlers": function () {},
  "initialize": function () {},
  "off": function () {},
  "on": function () {},
  "origin": function () {},
  "scene": function () {}
};
vegaEmbed.vega.SVGRenderer.prototype = {
  "_clearDefs": function () {},
  "_dirtyCheck": function () {},
  "_load": function () {},
  "_render": function () {},
  "_update": function () {},
  "background": function () {},
  "canvas": function () {},
  "constructor": function () {},
  "defs": function () {},
  "dirty": function () {},
  "element": function () {},
  "initialize": function () {},
  "isDirty": function () {},
  "loadImage": function () {},
  "mark": function () {},
  "render": function () {},
  "renderAsync": function () {},
  "resize": function () {},
  "sanitizeURL": function () {},
  "style": function () {},
  "svg": function () {}
};
vegaEmbed.vega.SVGStringRenderer.prototype = {
  "_load": function () {},
  "_render": function () {},
  "attr": function () {},
  "background": function () {},
  "canvas": function () {},
  "constructor": function () {},
  "defs": function () {},
  "dirty": function () {},
  "element": function () {},
  "href": function () {},
  "initialize": function () {},
  "loadImage": function () {},
  "mark": function () {},
  "render": function () {},
  "renderAsync": function () {},
  "resize": function () {},
  "sanitizeURL": function () {},
  "svg": function () {}
};
vegaEmbed.vega.Scenegraph.prototype = {
  "mark": function () {},
  "toJSON": function () {}
};
vegaEmbed.vega.Transform.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.View.prototype = {
  "_enqueue": function () {},
  "_getPulse": function () {},
  "_resetRenderer": function () {},
  "_resizeView": function () {},
  "add": function () {},
  "addDataListener": function () {},
  "addEventListener": function () {},
  "addResizeListener": function () {},
  "addSignalListener": function () {},
  "autosize": function () {},
  "background": function () {},
  "change": function () {},
  "changeset": function () {},
  "cleanThreshold": function () {},
  "connect": function () {},
  "constructor": function () {},
  "container": function () {},
  "data": function () {},
  "debug": function () {},
  "description": function () {},
  "dirty": function () {},
  "error": function () {},
  "evaluate": function () {},
  "events": function () {},
  "finalize": function () {},
  "getState": function () {},
  "globalCursor": function () {},
  "height": function () {},
  "hover": function () {},
  "info": function () {},
  "ingest": function () {},
  "initialize": function () {},
  "insert": function () {},
  "loader": function () {},
  "locale": function () {},
  "logLevel": function () {},
  "logger": function () {},
  "on": function () {},
  "origin": function () {},
  "padding": function () {},
  "parse": function () {},
  "preload": function () {},
  "preventDefault": function () {},
  "pulse": function () {},
  "rank": function () {},
  "remove": function () {},
  "removeDataListener": function () {},
  "removeEventListener": function () {},
  "removeResizeListener": function () {},
  "removeSignalListener": function () {},
  "renderer": function () {},
  "request": function () {},
  "rerank": function () {},
  "resize": function () {},
  "run": function () {},
  "runAfter": function () {},
  "runAsync": function () {},
  "scale": function () {},
  "scenegraph": function () {},
  "setState": function () {},
  "signal": function () {},
  "stamp": function () {},
  "timer": function () {},
  "toCanvas": function () {},
  "toImageURL": function () {},
  "toSVG": function () {},
  "tooltip": function () {},
  "touch": function () {},
  "update": function () {},
  "warn": function () {},
  "width": function () {}
};
vegaEmbed.vega.transforms.aggregate.prototype = {
  "add": function () {},
  "cell": function () {},
  "cellkey": function () {},
  "celltuple": function () {},
  "changes": function () {},
  "clean": function () {},
  "constructor": function () {},
  "cross": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "init": function () {},
  "marshall": function () {},
  "modified": function () {},
  "newcell": function () {},
  "newtuple": function () {},
  "parameters": function () {},
  "rem": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.axisticks.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.bin.prototype = {
  "_bins": function () {},
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.bound.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.collect.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.compare.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {}
};
vegaEmbed.vega.transforms.contour.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.countpattern.prototype = {
  "_finish": function () {},
  "_parameterCheck": function () {},
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.cross.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.crossfilter.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "eval": function () {},
  "evaluate": function () {},
  "incrementAll": function () {},
  "incrementOne": function () {},
  "init": function () {},
  "insert": function () {},
  "marshall": function () {},
  "modified": function () {},
  "modify": function () {},
  "parameters": function () {},
  "reindex": function () {},
  "reinit": function () {},
  "remove": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {},
  "update": function () {}
};
vegaEmbed.vega.transforms.datajoin.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.density.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.dotbin.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.encode.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.expression.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {}
};
vegaEmbed.vega.transforms.extent.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.facet.prototype = {
  "activate": function () {},
  "clean": function () {},
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "initTargets": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "subflow": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.field.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {}
};
vegaEmbed.vega.transforms.filter.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.flatten.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.fold.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.force.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "finish": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.formula.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.generate.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.geojson.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.geopath.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.geopoint.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.geoshape.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.graticule.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.heatmap.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.identifier.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.impute.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.isocontour.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.joinaggregate.prototype = {
  "add": function () {},
  "cell": function () {},
  "cellkey": function () {},
  "celltuple": function () {},
  "changes": function () {},
  "clean": function () {},
  "constructor": function () {},
  "cross": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "init": function () {},
  "marshall": function () {},
  "modified": function () {},
  "newcell": function () {},
  "newtuple": function () {},
  "parameters": function () {},
  "rem": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.kde.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.kde2d.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.key.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {}
};
vegaEmbed.vega.transforms.label.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.legendentries.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.linkpath.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.load.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.loess.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.lookup.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.mark.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.multiextent.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {}
};
vegaEmbed.vega.transforms.multivalues.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {}
};
vegaEmbed.vega.transforms.nest.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.overlap.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.pack.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "fields": function () {},
  "layout": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "params": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.params.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.partition.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "fields": function () {},
  "layout": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "params": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.pie.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.pivot.prototype = {
  "_transform": function () {},
  "add": function () {},
  "cell": function () {},
  "cellkey": function () {},
  "celltuple": function () {},
  "changes": function () {},
  "clean": function () {},
  "constructor": function () {},
  "cross": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "init": function () {},
  "marshall": function () {},
  "modified": function () {},
  "newcell": function () {},
  "newtuple": function () {},
  "parameters": function () {},
  "rem": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.prefacet.prototype = {
  "activate": function () {},
  "clean": function () {},
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "initTargets": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "subflow": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.project.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.projection.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.proxy.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.quantile.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.regression.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.relay.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.render.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.resolvefilter.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.sample.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.scale.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.sequence.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.sieve.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.sortitems.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.stack.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.stratify.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.subflow.prototype = {
  "add": function () {},
  "connect": function () {},
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "init": function () {},
  "marshall": function () {},
  "mod": function () {},
  "modified": function () {},
  "parameters": function () {},
  "rem": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {}
};
vegaEmbed.vega.transforms.timeunit.prototype = {
  "_floor": function () {},
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.tree.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "fields": function () {},
  "layout": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "params": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.treelinks.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.treemap.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "fields": function () {},
  "layout": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "params": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.tupleindex.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.values.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.viewlayout.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.voronoi.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.window.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "group": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vegaEmbed.vega.transforms.wordcloud.prototype = {
  "constructor": function () {},
  "detach": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
/**********************************************************************
 * End Generated Extern for vegaEmbed
/**********************************************************************/