/**********************************************************************
 * Extern for vega
 * Generated by http://jmmk.github.io/javascript-externs-generator
 **********************************************************************/
var vega = {
  "Bounds": function () {},
  "CanvasHandler": function () {},
  "CanvasRenderer": function () {},
  "Dataflow": function () {},
  "Debug": {},
  "EventStream": function () {},
  "Gradient": function () {},
  "GroupItem": function () {},
  "Handler": function () {},
  "Info": {},
  "Item": function () {},
  "Marks": {
    "arc": {
      "attr": function () {},
      "bound": function () {},
      "draw": function () {},
      "nested": {},
      "pick": function () {},
      "tag": {},
      "type": {}
    },
    "area": {
      "attr": function () {},
      "bound": function () {},
      "draw": function () {},
      "nested": {},
      "pick": function () {},
      "tag": {},
      "type": {}
    },
    "group": {
      "attr": function () {},
      "background": function () {},
      "bound": function () {},
      "draw": function () {},
      "foreground": function () {},
      "nested": {},
      "pick": function () {},
      "tag": {},
      "type": {}
    },
    "image": {
      "attr": function () {},
      "bound": function () {},
      "draw": function () {},
      "get": function () {},
      "nested": {},
      "pick": function () {},
      "tag": {},
      "type": {},
      "xOffset": function () {},
      "yOffset": function () {}
    },
    "line": {
      "attr": function () {},
      "bound": function () {},
      "draw": function () {},
      "nested": {},
      "pick": function () {},
      "tag": {},
      "type": {}
    },
    "path": {
      "attr": function () {},
      "bound": function () {},
      "draw": function () {},
      "nested": {},
      "pick": function () {},
      "tag": {},
      "type": {}
    },
    "rect": {
      "attr": function () {},
      "bound": function () {},
      "draw": function () {},
      "nested": {},
      "pick": function () {},
      "tag": {},
      "type": {}
    },
    "rule": {
      "attr": function () {},
      "bound": function () {},
      "draw": function () {},
      "nested": {},
      "pick": function () {},
      "tag": {},
      "type": {}
    },
    "shape": {
      "attr": function () {},
      "bound": function () {},
      "draw": function () {},
      "nested": {},
      "pick": function () {},
      "tag": {},
      "type": {}
    },
    "symbol": {
      "attr": function () {},
      "bound": function () {},
      "draw": function () {},
      "nested": {},
      "pick": function () {},
      "tag": {},
      "type": {}
    },
    "text": {
      "attr": function () {},
      "bound": function () {},
      "draw": function () {},
      "nested": {},
      "pick": function () {},
      "tag": {},
      "type": {}
    },
    "trail": {
      "attr": function () {},
      "bound": function () {},
      "draw": function () {},
      "nested": {},
      "pick": function () {},
      "tag": {},
      "type": {}
    }
  },
  "MultiPulse": function () {},
  "None": {},
  "Operator": function () {},
  "Parameters": function () {},
  "Pulse": function () {},
  "RenderType": {
    "Canvas": {},
    "None": {},
    "PNG": {},
    "SVG": {}
  },
  "Renderer": function () {},
  "ResourceLoader": function () {},
  "SVGHandler": function () {},
  "SVGRenderer": function () {},
  "SVGStringRenderer": function () {},
  "Scenegraph": function () {},
  "Transform": function () {},
  "View": function () {},
  "Warn": {},
  "accessor": function () {},
  "accessorFields": function () {},
  "accessorName": function () {},
  "array": function () {},
  "bin": function () {},
  "bootstrapCI": function () {},
  "boundContext": {
    "arc": function () {},
    "beginPath": function () {},
    "bezierCurveTo": function () {},
    "closePath": function () {},
    "lineTo": function () {},
    "moveTo": function () {},
    "quadraticCurveTo": function () {},
    "rect": function () {}
  },
  "boundItem": function () {},
  "boundMark": function () {},
  "boundStroke": function () {},
  "canvas": function () {},
  "changeset": function () {},
  "closeTag": function () {},
  "compare": function () {},
  "constant": function () {},
  "definition": function () {},
  "definitions": {
    "aggregate": {
      "metadata": {
        "changes": {},
        "generates": {}
      },
      "params": {},
      "type": {}
    },
    "bin": {
      "metadata": {
        "modifies": {}
      },
      "params": {},
      "type": {}
    },
    "collect": {
      "metadata": {
        "source": {}
      },
      "params": {},
      "type": {}
    },
    "countpattern": {
      "metadata": {
        "changes": {},
        "generates": {}
      },
      "params": {},
      "type": {}
    },
    "cross": {
      "metadata": {
        "changes": {},
        "generates": {},
        "source": {}
      },
      "params": {},
      "type": {}
    },
    "crossfilter": {
      "metadata": {},
      "params": {},
      "type": {}
    },
    "density": {
      "metadata": {
        "generates": {},
        "source": {}
      },
      "params": {},
      "type": {}
    },
    "extent": {
      "metadata": {},
      "params": {},
      "type": {}
    },
    "filter": {
      "metadata": {
        "changes": {}
      },
      "params": {},
      "type": {}
    },
    "fold": {
      "metadata": {
        "changes": {},
        "generates": {}
      },
      "params": {},
      "type": {}
    },
    "force": {
      "metadata": {
        "modifies": {}
      },
      "params": {},
      "type": {}
    },
    "formula": {
      "metadata": {
        "modifies": {}
      },
      "params": {},
      "type": {}
    },
    "geopath": {
      "metadata": {
        "modifies": {}
      },
      "params": {},
      "type": {}
    },
    "geopoint": {
      "metadata": {
        "modifies": {}
      },
      "params": {},
      "type": {}
    },
    "geoshape": {
      "metadata": {
        "modifies": {}
      },
      "params": {},
      "type": {}
    },
    "graticule": {
      "metadata": {
        "changes": {},
        "generates": {},
        "source": {}
      },
      "params": {},
      "type": {}
    },
    "impute": {
      "metadata": {
        "changes": {}
      },
      "params": {},
      "type": {}
    },
    "linkpath": {
      "metadata": {
        "modifies": {}
      },
      "params": {},
      "type": {}
    },
    "lookup": {
      "metadata": {
        "modifies": {}
      },
      "params": {},
      "type": {}
    },
    "nest": {
      "metadata": {
        "treesource": {}
      },
      "params": {},
      "type": {}
    },
    "pack": {
      "metadata": {
        "modifies": {},
        "tree": {}
      },
      "params": {},
      "type": {}
    },
    "partition": {
      "metadata": {
        "modifies": {},
        "tree": {}
      },
      "params": {},
      "type": {}
    },
    "pie": {
      "metadata": {
        "modifies": {}
      },
      "params": {},
      "type": {}
    },
    "rank": {
      "metadata": {
        "modifies": {}
      },
      "params": {},
      "type": {}
    },
    "resolvefilter": {
      "metadata": {},
      "params": {},
      "type": {}
    },
    "sample": {
      "metadata": {
        "changes": {},
        "source": {}
      },
      "params": {},
      "type": {}
    },
    "sequence": {
      "metadata": {
        "generates": {},
        "source": {}
      },
      "output": {},
      "params": {},
      "type": {}
    },
    "stack": {
      "metadata": {
        "modifies": {}
      },
      "params": {},
      "type": {}
    },
    "stratify": {
      "metadata": {
        "treesource": {}
      },
      "params": {},
      "type": {}
    },
    "tree": {
      "metadata": {
        "modifies": {},
        "tree": {}
      },
      "params": {},
      "type": {}
    },
    "treelinks": {
      "metadata": {
        "changes": {},
        "generates": {},
        "tree": {}
      },
      "params": {},
      "type": {}
    },
    "treemap": {
      "metadata": {
        "modifies": {},
        "tree": {}
      },
      "params": {},
      "type": {}
    },
    "voronoi": {
      "metadata": {
        "modifies": {}
      },
      "params": {},
      "type": {}
    },
    "wordcloud": {
      "metadata": {
        "modifies": {}
      },
      "params": {},
      "type": {}
    }
  },
  "domChild": function () {},
  "domClear": function () {},
  "domCreate": function () {},
  "domFind": function () {},
  "error": function () {},
  "expressionFunction": function () {},
  "extend": function () {},
  "extentIndex": function () {},
  "falsy": {
    "fields": {},
    "fname": {}
  },
  "fastmap": function () {},
  "field": function () {},
  "font": function () {},
  "formatLocale": function () {},
  "formats": function () {},
  "id": {
    "fields": {},
    "fname": {}
  },
  "identity": {
    "fields": {},
    "fname": {}
  },
  "inferType": function () {},
  "inferTypes": function () {},
  "ingest": function () {},
  "inherits": function () {},
  "interpolate": function () {},
  "interpolateRange": function () {},
  "isArray": function () {},
  "isBoolean": function () {},
  "isDate": function () {},
  "isFunction": function () {},
  "isNumber": function () {},
  "isObject": function () {},
  "isRegExp": function () {},
  "isString": function () {},
  "key": function () {},
  "loader": function () {},
  "logger": function () {},
  "merge": function () {},
  "one": {
    "fields": {},
    "fname": {}
  },
  "openTag": function () {},
  "pad": function () {},
  "parse": function () {},
  "pathCurves": function () {},
  "pathEqual": function () {},
  "pathParse": function () {},
  "pathRectangle": function () {},
  "pathRender": function () {},
  "pathSymbols": function () {},
  "pathTrail": function () {},
  "peek": function () {},
  "point": function () {},
  "projection": function () {},
  "quartiles": function () {},
  "randomInteger": function () {},
  "randomKDE": function () {},
  "randomMixture": function () {},
  "randomNormal": function () {},
  "randomUniform": function () {},
  "read": function () {},
  "register": function () {},
  "renderModule": function () {},
  "repeat": function () {},
  "runtime": function () {},
  "runtimeContext": function () {},
  "scale": function () {},
  "sceneEqual": function () {},
  "sceneFromJSON": function () {},
  "scenePickVisit": function () {},
  "sceneToJSON": function () {},
  "sceneVisit": function () {},
  "sceneZOrder": function () {},
  "scheme": function () {},
  "splitAccessPath": function () {},
  "stringValue": function () {},
  "textMetrics": {
    "canvas": function () {},
    "estimateWidth": function () {},
    "height": function () {},
    "measureWidth": function () {},
    "width": function () {}
  },
  "timeFormatLocale": function () {},
  "toBoolean": function () {},
  "toDate": function () {},
  "toNumber": function () {},
  "toSet": function () {},
  "toString": function () {},
  "transform": function () {},
  "transforms": {
    "Aggregate": function () {},
    "AxisTicks": function () {},
    "Bin": function () {},
    "Bound": function () {},
    "Collect": function () {},
    "Compare": function () {},
    "CountPattern": function () {},
    "Cross": function () {},
    "CrossFilter": function () {},
    "DataJoin": function () {},
    "Density": function () {},
    "Encode": function () {},
    "Extent": function () {},
    "Facet": function () {},
    "Field": function () {},
    "Filter": function () {},
    "Fold": function () {},
    "Force": function () {},
    "Formula": function () {},
    "Generate": function () {},
    "GeoPath": function () {},
    "GeoPoint": function () {},
    "GeoShape": function () {},
    "Graticule": function () {},
    "Impute": function () {},
    "Key": function () {},
    "LegendEntries": function () {},
    "LinkPath": function () {},
    "Lookup": function () {},
    "Mark": function () {},
    "MultiExtent": function () {},
    "MultiValues": function () {},
    "Nest": function () {},
    "Pack": function () {},
    "Params": function () {},
    "Partition": function () {},
    "Pie": function () {},
    "PreFacet": function () {},
    "Projection": function () {},
    "Proxy": function () {},
    "Rank": function () {},
    "Relay": function () {},
    "Render": function () {},
    "ResolveFilter": function () {},
    "Sample": function () {},
    "Scale": function () {},
    "Sequence": function () {},
    "Sieve": function () {},
    "SortItems": function () {},
    "Stack": function () {},
    "Stratify": function () {},
    "Subflow": function () {},
    "Tree": function () {},
    "TreeLinks": function () {},
    "Treemap": function () {},
    "TupleIndex": function () {},
    "Values": function () {},
    "ViewLayout": function () {},
    "Voronoi": function () {},
    "Wordcloud": function () {}
  },
  "truncate": function () {},
  "truthy": {
    "fields": {},
    "fname": {}
  },
  "tupleid": function () {},
  "typeParsers": {
    "boolean": function () {},
    "date": function () {},
    "integer": function () {},
    "number": function () {},
    "string": function () {}
  },
  "version": {},
  "visitArray": function () {},
  "zero": {
    "fields": {},
    "fname": {}
  }
};
vega.Bounds.prototype = {
  "add": function () {},
  "alignsWith": function () {},
  "clear": function () {},
  "clone": function () {},
  "contains": function () {},
  "encloses": function () {},
  "expand": function () {},
  "height": function () {},
  "intersect": function () {},
  "intersects": function () {},
  "rotate": function () {},
  "round": function () {},
  "set": function () {},
  "translate": function () {},
  "union": function () {},
  "width": function () {}
};
vega.CanvasHandler.prototype = {
  "DOMMouseScroll": function () {},
  "canvas": function () {},
  "click": function () {},
  "constructor": function () {},
  "context": function () {},
  "dragleave": function () {},
  "dragover": function () {},
  "element": function () {},
  "eventName": function () {},
  "events": function () {},
  "fire": function () {},
  "handleHref": function () {},
  "handleTooltip": function () {},
  "handlers": function () {},
  "initialize": function () {},
  "mousedown": function () {},
  "mousemove": function () {},
  "mouseout": function () {},
  "off": function () {},
  "on": function () {},
  "origin": function () {},
  "pick": function () {},
  "pickEvent": function () {},
  "scene": function () {},
  "touchend": function () {},
  "touchmove": function () {},
  "touchstart": function () {}
};
vega.CanvasRenderer.prototype = {
  "_load": function () {},
  "_render": function () {},
  "background": function () {},
  "canvas": function () {},
  "clear": function () {},
  "constructor": function () {},
  "context": function () {},
  "draw": function () {},
  "element": function () {},
  "initialize": function () {},
  "loadImage": function () {},
  "render": function () {},
  "renderAsync": function () {},
  "resize": function () {},
  "sanitizeURL": function () {},
  "scene": function () {}
};
vega.Dataflow.prototype = {
  "_enqueue": function () {},
  "_getPulse": function () {},
  "add": function () {},
  "changeset": function () {},
  "cleanThreshold": function () {},
  "connect": function () {},
  "debug": function () {},
  "error": function () {},
  "events": function () {},
  "info": function () {},
  "ingest": function () {},
  "loader": function () {},
  "logLevel": function () {},
  "on": function () {},
  "pulse": function () {},
  "rank": function () {},
  "request": function () {},
  "rerank": function () {},
  "run": function () {},
  "runAfter": function () {},
  "runAsync": function () {},
  "stamp": function () {},
  "touch": function () {},
  "update": function () {},
  "warn": function () {}
};
vega.EventStream.prototype = {
  "_apply": function () {},
  "_filter": function () {},
  "apply": function () {},
  "between": function () {},
  "consume": function () {},
  "debounce": function () {},
  "filter": function () {},
  "merge": function () {},
  "receive": function () {},
  "targets": function () {},
  "throttle": function () {}
};
vega.GroupItem.prototype = {
  "constructor": function () {}
};
vega.Handler.prototype = {
  "element": function () {},
  "eventName": function () {},
  "handleHref": function () {},
  "handleTooltip": function () {},
  "handlers": function () {},
  "initialize": function () {},
  "off": function () {},
  "on": function () {},
  "origin": function () {},
  "scene": function () {}
};
vega.MultiPulse.prototype = {
  "ADD": function () {},
  "ADD_MOD": function () {},
  "ADD_REM": function () {},
  "ALL": function () {},
  "MOD": function () {},
  "NO_FIELDS": function () {},
  "NO_SOURCE": function () {},
  "REFLOW": function () {},
  "REM": function () {},
  "SOURCE": function () {},
  "StopPropagation": function () {},
  "addAll": function () {},
  "changed": function () {},
  "constructor": function () {},
  "filter": function () {},
  "fork": function () {},
  "init": function () {},
  "materialize": function () {},
  "modified": function () {},
  "modifies": function () {},
  "reflow": function () {},
  "runAfter": function () {},
  "visit": function () {}
};
vega.Operator.prototype = {
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {}
};
vega.Parameters.prototype = {
  "clear": function () {},
  "modified": function () {},
  "set": function () {}
};
vega.Pulse.prototype = {
  "ADD": function () {},
  "ADD_MOD": function () {},
  "ADD_REM": function () {},
  "ALL": function () {},
  "MOD": function () {},
  "NO_FIELDS": function () {},
  "NO_SOURCE": function () {},
  "REFLOW": function () {},
  "REM": function () {},
  "SOURCE": function () {},
  "StopPropagation": function () {},
  "addAll": function () {},
  "changed": function () {},
  "filter": function () {},
  "fork": function () {},
  "init": function () {},
  "materialize": function () {},
  "modified": function () {},
  "modifies": function () {},
  "reflow": function () {},
  "runAfter": function () {},
  "visit": function () {}
};
vega.Renderer.prototype = {
  "_load": function () {},
  "_render": function () {},
  "background": function () {},
  "element": function () {},
  "initialize": function () {},
  "loadImage": function () {},
  "render": function () {},
  "renderAsync": function () {},
  "resize": function () {},
  "sanitizeURL": function () {},
  "scene": function () {}
};
vega.ResourceLoader.prototype = {
  "loadImage": function () {},
  "pending": function () {},
  "ready": function () {},
  "sanitizeURL": function () {}
};
vega.SVGHandler.prototype = {
  "constructor": function () {},
  "element": function () {},
  "eventName": function () {},
  "handleHref": function () {},
  "handleTooltip": function () {},
  "handlers": function () {},
  "initialize": function () {},
  "off": function () {},
  "on": function () {},
  "origin": function () {},
  "scene": function () {},
  "svg": function () {}
};
vega.SVGRenderer.prototype = {
  "_dirtyCheck": function () {},
  "_load": function () {},
  "_render": function () {},
  "_resetDefs": function () {},
  "_update": function () {},
  "background": function () {},
  "constructor": function () {},
  "draw": function () {},
  "element": function () {},
  "initialize": function () {},
  "isDirty": function () {},
  "loadImage": function () {},
  "render": function () {},
  "renderAsync": function () {},
  "resize": function () {},
  "sanitizeURL": function () {},
  "scene": function () {},
  "style": function () {},
  "svg": function () {},
  "updateDefs": function () {}
};
vega.SVGStringRenderer.prototype = {
  "_load": function () {},
  "_render": function () {},
  "attributes": function () {},
  "background": function () {},
  "buildDefs": function () {},
  "constructor": function () {},
  "element": function () {},
  "href": function () {},
  "initialize": function () {},
  "loadImage": function () {},
  "mark": function () {},
  "markGroup": function () {},
  "render": function () {},
  "renderAsync": function () {},
  "reset": function () {},
  "resize": function () {},
  "sanitizeURL": function () {},
  "scene": function () {},
  "svg": function () {}
};
vega.Scenegraph.prototype = {
  "mark": function () {},
  "toJSON": function () {}
};
vega.Transform.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.View.prototype = {
  "_enqueue": function () {},
  "_getPulse": function () {},
  "add": function () {},
  "addEventListener": function () {},
  "addSignalListener": function () {},
  "autosize": function () {},
  "background": function () {},
  "change": function () {},
  "changeset": function () {},
  "cleanThreshold": function () {},
  "connect": function () {},
  "constructor": function () {},
  "data": function () {},
  "debug": function () {},
  "enqueue": function () {},
  "error": function () {},
  "events": function () {},
  "finalize": function () {},
  "getState": function () {},
  "height": function () {},
  "hover": function () {},
  "info": function () {},
  "ingest": function () {},
  "initialize": function () {},
  "insert": function () {},
  "loader": function () {},
  "logLevel": function () {},
  "on": function () {},
  "padding": function () {},
  "preventDefault": function () {},
  "pulse": function () {},
  "rank": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "removeSignalListener": function () {},
  "render": function () {},
  "renderer": function () {},
  "request": function () {},
  "rerank": function () {},
  "run": function () {},
  "runAfter": function () {},
  "runAsync": function () {},
  "scenegraph": function () {},
  "setState": function () {},
  "signal": function () {},
  "stamp": function () {},
  "toCanvas": function () {},
  "toImageURL": function () {},
  "toSVG": function () {},
  "tooltipHandler": function () {},
  "touch": function () {},
  "update": function () {},
  "warn": function () {},
  "width": function () {}
};
vega.transforms.Aggregate.prototype = {
  "add": function () {},
  "cell": function () {},
  "cellkey": function () {},
  "celltuple": function () {},
  "changes": function () {},
  "constructor": function () {},
  "cross": function () {},
  "evaluate": function () {},
  "init": function () {},
  "marshall": function () {},
  "modified": function () {},
  "newcell": function () {},
  "newtuple": function () {},
  "parameters": function () {},
  "rem": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.AxisTicks.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Bin.prototype = {
  "_bins": function () {},
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Bound.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Collect.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Compare.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {}
};
vega.transforms.CountPattern.prototype = {
  "_finish": function () {},
  "_parameterCheck": function () {},
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Cross.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.CrossFilter.prototype = {
  "constructor": function () {},
  "eval": function () {},
  "evaluate": function () {},
  "incrementAll": function () {},
  "incrementOne": function () {},
  "init": function () {},
  "insert": function () {},
  "marshall": function () {},
  "modified": function () {},
  "modify": function () {},
  "parameters": function () {},
  "reindex": function () {},
  "reinit": function () {},
  "remove": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {},
  "update": function () {}
};
vega.transforms.DataJoin.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Density.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Encode.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Extent.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Facet.prototype = {
  "activate": function () {},
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "subflow": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Field.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {}
};
vega.transforms.Filter.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Fold.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Force.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "finish": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Formula.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Generate.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.GeoPath.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.GeoPoint.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.GeoShape.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Graticule.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Impute.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Key.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {}
};
vega.transforms.LegendEntries.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.LinkPath.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Lookup.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Mark.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.MultiExtent.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {}
};
vega.transforms.MultiValues.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {}
};
vega.transforms.Nest.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Pack.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "fields": function () {},
  "layout": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "params": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Params.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Partition.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "fields": function () {},
  "layout": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "params": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Pie.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.PreFacet.prototype = {
  "activate": function () {},
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "subflow": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Projection.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Proxy.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Rank.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Relay.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Render.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.ResolveFilter.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Sample.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Scale.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Sequence.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Sieve.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.SortItems.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Stack.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Stratify.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Subflow.prototype = {
  "add": function () {},
  "connect": function () {},
  "constructor": function () {},
  "evaluate": function () {},
  "init": function () {},
  "marshall": function () {},
  "mod": function () {},
  "modified": function () {},
  "parameters": function () {},
  "rem": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {}
};
vega.transforms.Tree.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "fields": function () {},
  "layout": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "params": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.TreeLinks.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Treemap.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "fields": function () {},
  "layout": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "params": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.TupleIndex.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Values.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.ViewLayout.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Voronoi.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
vega.transforms.Wordcloud.prototype = {
  "constructor": function () {},
  "evaluate": function () {},
  "marshall": function () {},
  "modified": function () {},
  "parameters": function () {},
  "run": function () {},
  "set": function () {},
  "skip": function () {},
  "targets": function () {},
  "transform": function () {}
};
/**********************************************************************
 * End Generated Extern for vega
/**********************************************************************/
