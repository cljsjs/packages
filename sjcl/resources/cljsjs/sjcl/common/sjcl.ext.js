/**********************************************************************
 * Extern for sjcl
 * Generated by http://jmmk.github.io/javascript-externs-generator
 **********************************************************************/
var sjcl = {
  "cipher": {
    "aes": function () {}
  },
  "hash": {
    "sha256": {
      "hash": function () {}
    }
  },
  "keyexchange": {},
  "mode": {
    "ccm": {
      "name": {},
      "G": {},
      "listenProgress": function () {},
      "unListenProgress": function () {},
      "fa": function () {},
      "encrypt": function () {},
      "decrypt": function () {},
      "na": function () {},
      "V": function () {},
      "C": function () {}
    },
    "ocb2": {
      "name": {},
      "encrypt": function () {},
      "decrypt": function () {},
      "pmac": function () {},
      "S": function () {}
    },
    "gcm": {
      "name": {},
      "encrypt": function () {},
      "decrypt": function () {},
      "ka": function () {},
      "j": function () {},
      "C": function () {}
    }
  },
  "misc": {
    "hmac": function () {},
    "pbkdf2": function () {},
    "pa": {},
    "cachedPbkdf2": function () {}
  },
  "codec": {
    "utf8String": {
      "fromBits": function () {},
      "toBits": function () {}
    },
    "hex": {
      "fromBits": function () {},
      "toBits": function () {}
    },
    "base32": {
      "B": {},
      "X": {},
      "BITS": {},
      "BASE": {},
      "REMAINING": {},
      "fromBits": function () {},
      "toBits": function () {}
    },
    "base32hex": {
      "fromBits": function () {},
      "toBits": function () {}
    },
    "base64": {
      "B": {},
      "fromBits": function () {},
      "toBits": function () {}
    },
    "base64url": {
      "fromBits": function () {},
      "toBits": function () {}
    }
  },
  "exception": {
    "corrupt": function () {},
    "invalid": function () {},
    "bug": function () {},
    "notReady": function () {}
  },
  "bitArray": {
    "bitSlice": function () {},
    "extract": function () {},
    "concat": function () {},
    "bitLength": function () {},
    "clamp": function () {},
    "partial": function () {},
    "getPartial": function () {},
    "equal": function () {},
    "$": function () {},
    "i": function () {},
    "byteswapM": function () {}
  },
  "prng": function () {},
  "random": {
    "c": {},
    "m": {},
    "P": {},
    "H": {
      "crypto['getRandomValues']": {}
    },
    "N": {},
    "U": {
      "crypto['getRandomValues']": {}
    },
    "ha": {},
    "o": {},
    "f": {},
    "Z": {},
    "b": {},
    "h": {},
    "L": {},
    "M": {},
    "D": {},
    "K": {
      "progress": {},
      "seeded": {}
    },
    "ga": {},
    "u": {},
    "I": {},
    "J": {},
    "ca": {},
    "T": {},
    "da": {},
    "ba": {},
    "randomWords": function () {},
    "setDefaultParanoia": function () {},
    "addEntropy": function () {},
    "isReady": function () {},
    "getProgress": function () {},
    "startCollectors": function () {},
    "stopCollectors": function () {},
    "addEventListener": function () {},
    "removeEventListener": function () {},
    "la": function () {},
    "oa": function () {},
    "qa": function () {},
    "ma": function () {},
    "ea": function () {}
  },
  "json": {
    "defaults": {
      "v": {},
      "iter": {},
      "ks": {},
      "ts": {},
      "mode": {},
      "adata": {},
      "cipher": {}
    },
    "ja": function () {},
    "encrypt": function () {},
    "ia": function () {},
    "decrypt": function () {},
    "encode": function () {},
    "decode": function () {},
    "g": function () {},
    "sa": function () {},
    "ra": function () {}
  },
  "encrypt": function () {},
  "decrypt": function () {}
};
sjcl.cipher.aes.prototype = {
  "encrypt": function () {},
  "decrypt": function () {},
  "s": function () {},
  "O": function () {}
};
sjcl.hash.sha256.prototype = {
  "blockSize": function () {},
  "reset": function () {},
  "update": function () {},
  "finalize": function () {},
  "Y": function () {},
  "b": function () {},
  "O": function () {}
};
sjcl.misc.hmac.prototype = {
  "mac": function () {},
  "encrypt": function () {},
  "reset": function () {},
  "update": function () {},
  "digest": function () {}
};
sjcl.prng.prototype = {
  "randomWords": function () {},
  "setDefaultParanoia": function () {},
  "addEntropy": function () {},
  "isReady": function () {},
  "getProgress": function () {},
  "startCollectors": function () {},
  "stopCollectors": function () {},
  "addEventListener": function () {},
  "removeEventListener": function () {},
  "la": function () {},
  "oa": function () {},
  "qa": function () {},
  "ma": function () {},
  "ea": function () {}
};
/**********************************************************************
 * End Generated Extern for sjcl
/**********************************************************************/
