/**********************************************************************
 * Extern for simplePeer
 * Generated by http://jmmk.github.io/javascript-externs-generator
 **********************************************************************/
var simplePeer = {
  "WEBRTC_SUPPORT": {},
  "channelConfig": {},
  "config": {
    "iceServers": {}
  },
  "constraints": {},
  "super_": {
    "super_": {
      "Duplex": function () {},
      "PassThrough": {
        "super_": {
          "super_": function () {}
        }
      },
      "Readable": function () {},
      "ReadableState": function () {},
      "Stream": function () {},
      "Transform": {
        "super_": function () {}
      },
      "Writable": {
        "WritableState": function () {},
        "super_": {
          "EventEmitter": function () {},
          "defaultMaxListeners": {},
          "listenerCount": function () {}
        }
      },
      "_fromList": function () {},
      "super_": {
        "EventEmitter": function () {},
        "defaultMaxListeners": {},
        "listenerCount": function () {}
      }
    }
  }
};
simplePeer.prototype = {
  "_addIceCandidate": function () {},
  "_createAnswer": function () {},
  "_createOffer": function () {},
  "_debug": function () {},
  "_destroy": function () {},
  "_events": function () {},
  "_maxListeners": function () {},
  "_maybeReady": function () {},
  "_onAddStream": function () {},
  "_onChannelBufferedAmountLow": function () {},
  "_onChannelClose": function () {},
  "_onChannelMessage": function () {},
  "_onChannelOpen": function () {},
  "_onFinish": function () {},
  "_onIceCandidate": function () {},
  "_onIceStateChange": function () {},
  "_onInterval": function () {},
  "_onSignalingStateChange": function () {},
  "_onTrack": function () {},
  "_read": function () {},
  "_setupData": function () {},
  "_transformConstraints": function () {},
  "_undestroy": function () {},
  "_write": function () {},
  "_writev": function () {},
  "addListener": function () {},
  "address": function () {},
  "cork": function () {},
  "destroy": function () {},
  "emit": function () {},
  "end": function () {},
  "getStats": function () {},
  "isPaused": function () {},
  "listenerCount": function () {},
  "listeners": function () {},
  "on": function () {},
  "once": function () {},
  "pause": function () {},
  "pipe": function () {},
  "push": function () {},
  "read": function () {},
  "removeAllListeners": function () {},
  "removeListener": function () {},
  "resume": function () {},
  "send": function () {},
  "setDefaultEncoding": function () {},
  "setEncoding": function () {},
  "setMaxListeners": function () {},
  "signal": function () {},
  "uncork": function () {},
  "unpipe": function () {},
  "unshift": function () {},
  "wrap": function () {},
  "write": function () {}
};
simplePeer.super_.prototype = {
  "_destroy": function () {},
  "_events": function () {},
  "_maxListeners": function () {},
  "_read": function () {},
  "_undestroy": function () {},
  "_write": function () {},
  "_writev": function () {},
  "addListener": function () {},
  "cork": function () {},
  "destroy": function () {},
  "emit": function () {},
  "end": function () {},
  "isPaused": function () {},
  "listenerCount": function () {},
  "listeners": function () {},
  "on": function () {},
  "once": function () {},
  "pause": function () {},
  "pipe": function () {},
  "push": function () {},
  "read": function () {},
  "removeAllListeners": function () {},
  "removeListener": function () {},
  "resume": function () {},
  "setDefaultEncoding": function () {},
  "setEncoding": function () {},
  "setMaxListeners": function () {},
  "uncork": function () {},
  "unpipe": function () {},
  "unshift": function () {},
  "wrap": function () {},
  "write": function () {}
};
simplePeer.super_.super_.prototype = {
  "_destroy": function () {},
  "_events": function () {},
  "_maxListeners": function () {},
  "_read": function () {},
  "_undestroy": function () {},
  "addListener": function () {},
  "destroy": function () {},
  "emit": function () {},
  "isPaused": function () {},
  "listenerCount": function () {},
  "listeners": function () {},
  "on": function () {},
  "once": function () {},
  "pause": function () {},
  "pipe": function () {},
  "push": function () {},
  "read": function () {},
  "removeAllListeners": function () {},
  "removeListener": function () {},
  "resume": function () {},
  "setEncoding": function () {},
  "setMaxListeners": function () {},
  "unpipe": function () {},
  "unshift": function () {},
  "wrap": function () {}
};
simplePeer.super_.super_.PassThrough.prototype = {
  "_destroy": function () {},
  "_events": function () {},
  "_maxListeners": function () {},
  "_read": function () {},
  "_transform": function () {},
  "_undestroy": function () {},
  "_write": function () {},
  "_writev": function () {},
  "addListener": function () {},
  "cork": function () {},
  "destroy": function () {},
  "emit": function () {},
  "end": function () {},
  "isPaused": function () {},
  "listenerCount": function () {},
  "listeners": function () {},
  "on": function () {},
  "once": function () {},
  "pause": function () {},
  "pipe": function () {},
  "push": function () {},
  "read": function () {},
  "removeAllListeners": function () {},
  "removeListener": function () {},
  "resume": function () {},
  "setDefaultEncoding": function () {},
  "setEncoding": function () {},
  "setMaxListeners": function () {},
  "uncork": function () {},
  "unpipe": function () {},
  "unshift": function () {},
  "wrap": function () {},
  "write": function () {}
};
simplePeer.super_.super_.PassThrough.super_.prototype = {
  "_destroy": function () {},
  "_events": function () {},
  "_maxListeners": function () {},
  "_read": function () {},
  "_transform": function () {},
  "_undestroy": function () {},
  "_write": function () {},
  "_writev": function () {},
  "addListener": function () {},
  "cork": function () {},
  "destroy": function () {},
  "emit": function () {},
  "end": function () {},
  "isPaused": function () {},
  "listenerCount": function () {},
  "listeners": function () {},
  "on": function () {},
  "once": function () {},
  "pause": function () {},
  "pipe": function () {},
  "push": function () {},
  "read": function () {},
  "removeAllListeners": function () {},
  "removeListener": function () {},
  "resume": function () {},
  "setDefaultEncoding": function () {},
  "setEncoding": function () {},
  "setMaxListeners": function () {},
  "uncork": function () {},
  "unpipe": function () {},
  "unshift": function () {},
  "wrap": function () {},
  "write": function () {}
};
simplePeer.super_.super_.Transform.prototype = {
  "_destroy": function () {},
  "_events": function () {},
  "_maxListeners": function () {},
  "_read": function () {},
  "_transform": function () {},
  "_undestroy": function () {},
  "_write": function () {},
  "_writev": function () {},
  "addListener": function () {},
  "cork": function () {},
  "destroy": function () {},
  "emit": function () {},
  "end": function () {},
  "isPaused": function () {},
  "listenerCount": function () {},
  "listeners": function () {},
  "on": function () {},
  "once": function () {},
  "pause": function () {},
  "pipe": function () {},
  "push": function () {},
  "read": function () {},
  "removeAllListeners": function () {},
  "removeListener": function () {},
  "resume": function () {},
  "setDefaultEncoding": function () {},
  "setEncoding": function () {},
  "setMaxListeners": function () {},
  "uncork": function () {},
  "unpipe": function () {},
  "unshift": function () {},
  "wrap": function () {},
  "write": function () {}
};
simplePeer.super_.super_.Writable.prototype = {
  "_destroy": function () {},
  "_events": function () {},
  "_maxListeners": function () {},
  "_undestroy": function () {},
  "_write": function () {},
  "_writev": function () {},
  "addListener": function () {},
  "cork": function () {},
  "destroy": function () {},
  "emit": function () {},
  "end": function () {},
  "listenerCount": function () {},
  "listeners": function () {},
  "on": function () {},
  "once": function () {},
  "pipe": function () {},
  "removeAllListeners": function () {},
  "removeListener": function () {},
  "setDefaultEncoding": function () {},
  "setMaxListeners": function () {},
  "uncork": function () {},
  "write": function () {}
};
simplePeer.super_.super_.Writable.WritableState.prototype = {
  "getBuffer": function () {}
};
simplePeer.super_.super_.Writable.super_.prototype = {
  "_events": function () {},
  "_maxListeners": function () {},
  "addListener": function () {},
  "emit": function () {},
  "listenerCount": function () {},
  "listeners": function () {},
  "on": function () {},
  "once": function () {},
  "removeAllListeners": function () {},
  "removeListener": function () {},
  "setMaxListeners": function () {}
};
simplePeer.super_.super_.super_.prototype = {
  "_events": function () {},
  "_maxListeners": function () {},
  "addListener": function () {},
  "emit": function () {},
  "listenerCount": function () {},
  "listeners": function () {},
  "on": function () {},
  "once": function () {},
  "removeAllListeners": function () {},
  "removeListener": function () {},
  "setMaxListeners": function () {}
};
/**********************************************************************
 * End Generated Extern for simplePeer
/**********************************************************************/
