/**********************************************************************
 * Extern for Point2D
 * Generated by http://jmmk.github.io/javascript-externs-generator
 **********************************************************************/
var Point2D = function () {};

Point2D.prototype = {
    "clone": function () {},
    "add": function () {},
    "subtract": function () {},
    "multiply": function () {},
    "divide": function () {},
    "equals": function () {},
    "lerp": function () {},
    "distanceFrom": function () {},
    "min": function () {},
    "max": function () {},
    "transform": function () {},
    "toString": function () {}};

/**********************************************************************
 * Extern for Vector2D
 * Generated by http://jmmk.github.io/javascript-externs-generator
 **********************************************************************/
var Vector2D = {
    "fromPoints": function () {}};

Vector2D.prototype = {
    "length": function () {},
    "magnitude": function () {},
    "dot": function () {},
    "cross": function () {},
    "determinant": function () {},
    "unit": function () {},
    "add": function () {},
    "subtract": function () {},
    "multiply": function () {},
    "divide": function () {},
    "angleBetween": function () {},
    "perp": function () {},
    "perpendicular": function () {},
    "project": function () {},
    "transform": function () {},
    "equals": function () {},
    "toString": function () {}};

/**********************************************************************
 * Extern for Matrix2D
 * Generated by http://jmmk.github.io/javascript-externs-generator
 **********************************************************************/
var Matrix2D = {
    "IDENTITY": {
        "a": {},
        "b": {},
        "c": {},
        "d": {},
        "e": {},
        "f": {},
        "isIdentity": function () {},
        "multiply": function () {},
        "inverse": function () {},
        "translate": function () {},
        "scale": function () {},
        "scaleAt": function () {},
        "scaleNonUniform": function () {},
        "scaleNonUniformAt": function () {},
        "rotate": function () {},
        "rotateAt": function () {},
        "rotateFromVector": function () {},
        "flipX": function () {},
        "flipY": function () {},
        "skewX": function () {},
        "skewY": function () {},
        "isInvertible": function () {},
        "getScale": function () {},
        "getDecomposition": function () {},
        "equals": function () {},
        "toString": function () {}
    }};

Matrix2D.prototype = {
    "multiply": function () {},
    "inverse": function () {},
    "translate": function () {},
    "scale": function () {},
    "scaleAt": function () {},
    "scaleNonUniform": function () {},
    "scaleNonUniformAt": function () {},
    "rotate": function () {},
    "rotateAt": function () {},
    "rotateFromVector": function () {},
    "flipX": function () {},
    "flipY": function () {},
    "skewX": function () {},
    "skewY": function () {},
    "isIdentity": function () {},
    "isInvertible": function () {},
    "getScale": function () {},
    "getDecomposition": function () {},
    "equals": function () {},
    "toString": function () {}};

/**********************************************************************
 * Extern for Polynomial
 * Generated by http://jmmk.github.io/javascript-externs-generator
 **********************************************************************/
var Polynomial = {
    "TOLERANCE": {},
    "ACCURACY": {},
    "interpolate": function () {},
    "newton_secant_bisection": function () {}};

Polynomial.prototype = {
    "init": function () {},
    "eval": function () {},
    "add": function () {},
    "multiply": function () {},
    "divide_scalar": function () {},
    "simplify": function () {},
    "bisection": function () {},
    "toString": function () {},
    "trapezoid": function () {},
    "simpson": function () {},
    "romberg": function () {},
    "getDegree": function () {},
    "getDerivative": function () {},
    "getRoots": function () {},
    "getRootsInInterval": function () {},
    "getLinearRoot": function () {},
    "getQuadraticRoots": function () {},
    "getCubicRoots": function () {},
    "getQuarticRoots": function () {},
    "zeroErrorEstimate": function () {},
    "bounds_UpperReal_Fujiwara": function () {},
    "bounds_LowerReal_Fujiwara": function () {},
    "bounds": function () {},
    "clone": function () {},
    "modify_zeroSmallCoefs": function () {},
    "modify_toMonic": function () {},
    "bound_UpperAbs_Rouche": function () {},
    "bound_LowerAbs_Rouche": function () {},
    "bounds_Real_Laguerre": function () {},
    "countRoots_Descartes": function () {}};

/**********************************************************************
 * Extern for SqrtPolynomial
 * Generated by http://jmmk.github.io/javascript-externs-generator
 **********************************************************************/
var SqrtPolynomial = {
    "VERSION": {},
    "superclass": {
        "init": function () {},
        "eval": function () {},
        "add": function () {},
        "multiply": function () {},
        "divide_scalar": function () {},
        "simplify": function () {},
        "bisection": function () {},
        "toString": function () {},
        "trapezoid": function () {},
        "simpson": function () {},
        "romberg": function () {},
        "getDegree": function () {},
        "getDerivative": function () {},
        "getRoots": function () {},
        "getRootsInInterval": function () {},
        "getLinearRoot": function () {},
        "getQuadraticRoots": function () {},
        "getCubicRoots": function () {},
        "getQuarticRoots": function () {},
        "zeroErrorEstimate": function () {},
        "bounds_UpperReal_Fujiwara": function () {},
        "bounds_LowerReal_Fujiwara": function () {},
        "bounds": function () {}}};

SqrtPolynomial.prototype = {
    "coefs": function () {},
    "_variable": function () {},
    "_s": function () {},
    "constructor": function () {},
    "eval": function () {},
    "toString": function () {},
    "init": function () {},
    "add": function () {},
    "multiply": function () {},
    "divide_scalar": function () {},
    "simplify": function () {},
    "bisection": function () {},
    "trapezoid": function () {},
    "simpson": function () {},
    "romberg": function () {},
    "getDegree": function () {},
    "getDerivative": function () {},
    "getRoots": function () {},
    "getRootsInInterval": function () {},
    "getLinearRoot": function () {},
    "getQuadraticRoots": function () {},
    "getCubicRoots": function () {},
    "getQuarticRoots": function () {},
    "zeroErrorEstimate": function () {},
    "bounds_UpperReal_Fujiwara": function () {},
    "bounds_LowerReal_Fujiwara": function () {},
    "bounds": function () {}};

/**********************************************************************
 * The following is partly generated and partly written by hand
 **********************************************************************/

var Intersection = {
    "intersectShapes": function () {},
    "intersectPathShape": function () {},
    "intersectArcShape": function () {},
    "intersectBezier2Bezier2": function () {},
    "intersectBezier2Bezier3": function () {},
    "intersectBezier2Circle": function () {},
    "intersectBezier2Ellipse": function () {},
    "intersectBezier2Line": function () {},
    "intersectBezier2Polygon": function () {},
    "intersectBezier2Rectangle": function () {},
    "intersectBezier3Bezier3": function () {},
    "intersectBezier3Circle": function () {},
    "intersectBezier3Ellipse": function () {},
    "intersectBezier3Line": function () {},
    "intersectBezier3Polygon": function () {},
    "intersectBezier3Rectangle": function () {},
    "intersectCircleCircle": function () {},
    "intersectCircleEllipse": function () {},
    "intersectCircleLine": function () {},
    "intersectCirclePolygon": function () {},
    "intersectCircleRectangle": function () {},
    "intersectEllipseEllipse": function () {},
    "intersectEllipseLine": function () {},
    "intersectEllipsePolygon": function () {},
    "intersectEllipseRectangle": function () {},
    "intersectLineLine": function () {},
    "intersectLinePolygon": function () {},
    "intersectLineRectangle": function () {},
    "intersectPolygonPolygon": function () {},
    "intersectPolygonRectangle": function () {},
    "intersectRayRay": function () {},
    "intersectRectangleRectangle": function () {},
    "Utils": {
        "bezout": function (e1, e2) {},
        "getArcParamaters": function (startPoint, endPoint, rx, ry, angle, arcFlag, sweepFlag) {},
        "removeClosePoints": function (points1, points2) {},
        "removeMultipleRootsIn01": function (roots) {},
        "removePointsNotInArc": function (intersection, c, rx, ry, phi, th1, dth, m) {}
    }};

Intersection.prototype = {
    "init": function () {},
    "appendPoint": function () {},
    "appendPoints": function () {}
};

Object.TYPE;
Object.LINE;
Object.RECT;
Object.ROUNDRECT;
Object.CIRCLE;
Object.ELLIPSE;
Object.POLYGON;
Object.POLYLINE;
Object.PATH;
Object.ARC;
Object.BEZIER2;
Object.BEZIER;

var IntersectionParams = {
    "newArc": function (startPoint, endPoint, rx, ry, angle, largeArcFlag, sweepFlag) {},
    "newBezier2": function (p1, p2, p3) {},
    "newBezier3": function (p1, p2, p3, p4) {},
    "newCircle": function (c, r) {},
    "newEllipse": function (c, rx, ry) {},
    "newLine": function (a1, a2) {},
    "newPolygon": function (points) {},
    "newPolyline": function (points) {},
    "newPath": function (segments) {},
    "newRect": function (x, y, width, height) {},
    "newRoundRect": function (x, y, width, height, rx, ry) {}};

IntersectionParams.prototype = {
    "init": function (type, params) {}};
